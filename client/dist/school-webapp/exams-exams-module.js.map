{"version":3,"sources":["webpack:///./src/app/exams/exams.component.html","webpack:///./src/app/exams/exams.component.scss","webpack:///./src/app/exams/exams.component.ts","webpack:///./src/app/exams/exams.module.ts","webpack:///./src/app/exams/exams.routing.ts","webpack:///./src/app/exams/searchexam.pipe.ts"],"names":[],"mappings":"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","file":"exams-exams-module.js","sourcesContent":["module.exports = \"<div class=\\\"row\\\">\\r\\n\\r\\n    <div class=\\\"col-lg-12 grid-margin stretch-card\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Exam Details</h4>\\r\\n\\r\\n                <div class=\\\"row\\\" style=\\\"margin-top: 1em; margin-bottom: 0em; padding-bottom: 1em; padding-top: 1em;\\\">\\r\\n                    <div class=\\\"col-lg-4  \\\">\\r\\n                        <input class=\\\"form-control fm-control\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Exam Name / Exam Type\\\">\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-lg-6  \\\">\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-lg-2 pull-right \\\" style=\\\"padding-bottom: 1.5em;\\\">\\r\\n\\r\\n                        <button _ngcontent-c2=\\\"\\\" (click)=\\\" openNgModal(addExamModel, 'md')\\\" class=\\\"btn btn-success btn-block\\\">New\\r\\n              Exam\\r\\n              <i _ngcontent-c2=\\\"\\\" class=\\\"mdi mdi-plus\\\"></i></button>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-12 col-md-12\\\" style=\\\"text-align: center\\\">\\r\\n                        <h5 style=\\\"color: red;\\\"> {{dbRespMsg}}</h5>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"table-responsive\\\" *ngIf=\\\"showtable\\\">\\r\\n                    <table class=\\\"table table-bordered\\\">\\r\\n                        <thead class=\\\"thead-light\\\">\\r\\n                            <tr>\\r\\n                                <th>Exam Name</th>\\r\\n                                <th>Grading Method</th>\\r\\n                                <!-- <th>Exam Total Marks</th> -->\\r\\n                                <!-- <th>Exam Date</th> -->\\r\\n                                <!-- <th>Comment</th> -->\\r\\n                                <th *ngIf=\\\"(admin_level == 1)\\\">Actions</th>\\r\\n\\r\\n                            </tr>\\r\\n                        </thead>\\r\\n                        <tbody>\\r\\n                            <tr *ngFor=\\\"let item of examsDataList | examfilter: searchText  | paginate: { id: 'pager', itemsPerPage: pageSize, currentPage: pageNumber};let index = index\\\">\\r\\n                                <td>{{item.exam_name}}</td>\\r\\n                                <td>{{item.grading_method == 1 ? 'Percent Gradding' : 'Letter Grading'}}</td>\\r\\n                                <!-- <td>{{item.exam_tmarks}}</td> -->\\r\\n                                <!-- <td>{{item.exam_date * 1000 | date}}</td> -->\\r\\n                                <!-- <td>{{item.exam_comment}}</td> -->\\r\\n\\r\\n                                <td *ngIf=\\\"(admin_level == 1)\\\">\\r\\n\\r\\n                                    <label class=\\\"badge badge-info\\\" (click)=openUpdateExamModal(updateExamModel,item.exam_id) style=\\\"cursor: pointer;\\\">Edit</label>\\r\\n                                    <label class=\\\"badge badge-danger\\\" (click)=onClickDelExam(item.exam_id) style=\\\"cursor: pointer; margin-left: 1em;\\\">Delete\\r\\n                  </label>\\r\\n\\r\\n                                </td>\\r\\n                            </tr>\\r\\n                        </tbody>\\r\\n                    </table>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<!-- *********************************** Modals **************************************** -->\\r\\n\\r\\n<!-- ******** Add exam ************ -->\\r\\n\\r\\n<ng-template #addExamModel let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Add Exams</h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n    <!-- <form class=\\\"form-group\\\" #addexam=\\\"ngForm\\\" (ngSubmit)=\\\"onClickAddExam(addexam)\\\"> -->\\r\\n    <form class=\\\"form-group\\\" [formGroup]=\\\"profileForm\\\" (ngSubmit)=\\\"onSubmitAddExam()\\\">\\r\\n        <div class=\\\"modal-body\\\">\\r\\n\\r\\n            <label class=\\\"control-label\\\"> Select Number Of Exams *</label>\\r\\n\\r\\n            <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" required (change)=\\\"SetNumberOfExams(pickedNumberOfExams.value)\\\" #pickedNumberOfExams formControlName=\\\"examNumber\\\">\\r\\n\\r\\n        <option value='1'> 1 </option>\\r\\n        <option value='2'> 2</option>\\r\\n        <option value='3'> 3 </option>\\r\\n        <option value='4'> 4 </option>\\r\\n        <option value='5'> 5 </option>\\r\\n        <option value='6'> 6 </option>\\r\\n        <option value='7'> 7 </option>\\r\\n        <option value='8'> 8 </option>\\r\\n        <option value='9'> 9 </option>\\r\\n        <option value='10'> 10 </option>\\r\\n\\r\\n      </select>\\r\\n\\r\\n            <div formArrayName=\\\"exams\\\" style=\\\"margin-top:0.5em\\\" *ngIf=\\\"showLabel\\\">\\r\\n                <label class=\\\"control-label\\\"> Exam Name *</label>\\r\\n                <div *ngFor=\\\"let exam of exams.controls; let i=index\\\">\\r\\n\\r\\n                    <input type=\\\"text\\\" placeholder=\\\"Exam Name\\\" required class=\\\"form-control fm-control\\\" [formControlName]=\\\"i\\\" style=\\\"margin-top:0.5em; margin-bottom:0.5em;\\\">\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"showLabel\\\">\\r\\n                <label class=\\\"control-label\\\"> Grading Systems *</label>\\r\\n\\r\\n                <select class=\\\"form-control fm-control\\\" required style=\\\"margin-top:0em;\\\" formControlName=\\\"grading_system\\\">\\r\\n\\r\\n          <option value='1'> Percentage Grading </option>\\r\\n          <option value='2'> Letter Grading </option>\\r\\n        </select>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-info\\\" [disabled]=\\\"!profileForm.valid\\\">Submit</button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"closeModal()\\\">Close</button>\\r\\n        </div>\\r\\n    </form>\\r\\n\\r\\n</ng-template>\\r\\n\\r\\n<!-- ******** Update exam ************ -->\\r\\n\\r\\n<ng-template #updateExamModel let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Add Exam</h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n    <form class=\\\"form-group\\\" #updateExam=\\\"ngForm\\\" (ngSubmit)=\\\"onClickUpdateExam(updateExam)\\\">\\r\\n        <div class=\\\"modal-body\\\">\\r\\n\\r\\n            <label class=\\\"control-label\\\"> Exam Name</label>\\r\\n\\r\\n            <input type=\\\"text\\\" required class=\\\"form-control fm-control\\\" name=\\\"examName\\\" placeholder=\\\"Exam Name\\\" [(ngModel)]=\\\"examName\\\" #pickedEUName=\\\"ngModel\\\">\\r\\n            <p class=\\\"alert alert-danger\\\" *ngIf=\\\"!pickedEUName.valid && pickedEUName.touched\\\" style=\\\"margin-top:1em; margin-left:0em;\\\">\\r\\n                Exam name is required!\\r\\n            </p>\\r\\n\\r\\n            <label class=\\\"control-label\\\">Exam Date</label>\\r\\n            <input type=\\\"date\\\" class=\\\"form-control fm-control\\\" name=\\\"examDate\\\" [(ngModel)]=\\\"examDate\\\" #pickedEUDate=\\\"ngModel\\\">\\r\\n\\r\\n\\r\\n            <label class=\\\"control-label\\\"> Grading Systems *</label>\\r\\n            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedGradingSystems.valid && pickedGradingSystems.touched\\\"><small>Grading Systems\\r\\n          Required</small></span>\\r\\n            <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedGradingSystems [(ngModel)]=\\\"ugrading_system\\\" name=\\\"ugrading_system\\\">\\r\\n\\r\\n        <option value='1' [selected]=\\\"ugrading_system == 1\\\"> Percentage Grading </option>\\r\\n        <option value='2' [selected]=\\\"ugrading_system == 2\\\"> Letter Grading </option>\\r\\n      </select>\\r\\n\\r\\n            <!-- <label class=\\\"control-label\\\"> Exam Total Marks</label>\\r\\n\\r\\n            <input type=\\\"text\\\" required class=\\\"form-control fm-control\\\" name=\\\"examTMarks\\\" placeholder=\\\"Exam Total Marks\\\" [(ngModel)]=\\\"examTMarks\\\" #pickedexamTMarks=\\\"ngModel\\\">\\r\\n            <p class=\\\"alert alert-danger\\\" *ngIf=\\\"!pickedexamTMarks.valid && pickedexamTMarks.touched\\\" style=\\\"margin-top:1em; margin-left:0em;\\\">\\r\\n                Exam Total Marks required!\\r\\n            </p> -->\\r\\n\\r\\n            <!-- <label class=\\\"control-label\\\" style=\\\"margin-bottom: .5em;\\\">Comment</label>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control fm-control\\\" name=\\\"examComment\\\" placeholder=\\\"Comment\\\" [(ngModel)]=\\\"examComment\\\"> -->\\r\\n\\r\\n            <div class=\\\"modal_button\\\" style=\\\"text-align:right\\\">\\r\\n                <input type=\\\"hidden\\\" class=\\\"form-control fm-control\\\" name=\\\"examId\\\" placeholder=\\\"Comment\\\" [(ngModel)]=\\\"examId\\\">\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n            <input type=\\\"submit\\\" class=\\\"btn btn-info\\\" [disabled]=\\\"!updateExam.form.valid\\\" value=\\\"Update Exam\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"modal.close('Close click')\\\">Close</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</ng-template>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { FormArray, FormBuilder } from '@angular/forms';\r\nimport swal from 'sweetalert2';\r\nimport { Validators } from '@angular/forms';\r\nimport { StudentsInfoService } from '../students/student-information.service';\r\nimport { SectionDataService } from '../sections/manageSection.service';\r\nimport { ClassDataService } from './../classes/manageClass.service';\r\nimport { AddExamsService } from './add-exams.service';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CommonService } from '../shared/services/common.service';\r\n\r\n@Component({\r\n  selector: 'app-exams',\r\n  templateUrl: './exams.component.html',\r\n  styleUrls: ['./exams.component.scss'],\r\n  providers: [\r\n    AddExamsService,\r\n    StudentsInfoService,\r\n    SectionDataService,\r\n    ClassDataService,\r\n    CommonService\r\n  ]\r\n})\r\nexport class ExamsComponent implements OnInit {\r\n  /* active session */\r\n  public running_session = localStorage.getItem('running_session');\r\n  public searchText;\r\n  showLabel = false;\r\n  disableBtn = true;\r\n\r\n  // add exam variables\r\n  exam_name: string;\r\n  exam_comment: string;\r\n  exam_date: string;\r\n  exam_tmarks: number;\r\n  type = '';\r\n  showTotalMarksField = false;\r\n  grading_system: number;\r\n\r\n  // update exam variables\r\n\r\n  examName: string;\r\n  examId: number;\r\n  examComment: string;\r\n  examDate: string;\r\n  examTMarks: number;\r\n  ugrading_system: number;\r\n\r\n  // arrays\r\n  examsDataList: Array<any>;\r\n  singleExamListA: Array<any>;\r\n\r\n  // notifications\r\n\r\n  successNotifi = 0;\r\n  updateNotifi = 0;\r\n  alertType = '';\r\n  addExamNoti = '';\r\n  updateExamNoti = '';\r\n  dbRespMsg = '';\r\n\r\n  showtable = false;\r\n\r\n  /* pagination Info */\r\n  pageSize = 10;\r\n  pageNumber = 1;\r\n  admin_level: any;\r\n\r\n  profileForm = this.fb.group({\r\n    examNumber: [''],\r\n    grading_system: [''],\r\n    exams: this.fb.array([])\r\n  });\r\n\r\n  constructor(\r\n    private _addExamsService: AddExamsService,\r\n    private _StudentsInfoService: StudentsInfoService,\r\n    private _classDataService: ClassDataService,\r\n    private _sectionDataService: SectionDataService,\r\n    private modalService: NgbModal,\r\n    private _commonService: CommonService,\r\n    private fb: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // get admin level\r\n    this.admin_level = localStorage.getItem('admin_level');\r\n    this.getExamsinfo();\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Read Data from DB Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Get all exams data ************************/\r\n  // ******************************************************************* */\r\n\r\n  public getExamsinfo() {\r\n    this.dbRespMsg = '';\r\n\r\n    this._addExamsService\r\n      .getExamInfoFun(this.running_session)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this.examsDataList = result.data;\r\n          this.showtable = true;\r\n        }\r\n        if (result.status === 0) {\r\n          this.showtable = false;\r\n          this.dbRespMsg = 'No exam is added.';\r\n        }\r\n\r\n        if (result.status === 403) {\r\n          this.dbRespMsg = result.msg;\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Get single exams data ************************/\r\n  // ******************************************************************* */\r\n  public get_singleExamData(exam_id) {\r\n    let singleExam = null;\r\n    this._addExamsService.get_singleExamDataFun(exam_id).subscribe(result => {\r\n      if (result.status === 1) {\r\n        this.singleExamListA = result.data;\r\n\r\n        singleExam = this.singleExamListA[0];\r\n\r\n        this.examId = singleExam.exam_id;\r\n        this.examName = singleExam.exam_name;\r\n        // this.examDate = singleExam.exam_date = ''\r\n        //   ? ''\r\n        //   : this._commonService.get_date_from_unix(singleExam.exam_date);\r\n        this.examComment = singleExam.exam_comment;\r\n        this.examTMarks = singleExam.exam_tmarks;\r\n        this.ugrading_system = singleExam.grading_method;\r\n      } else {\r\n        this.alertType = 'danger';\r\n        this.updateNotifi = 1;\r\n        this.updateExamNoti = result.msg;\r\n      }\r\n    });\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************Add , Delete , Update Data  Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // dynamic form generation\r\n\r\n  get exams() {\r\n    return this.profileForm.get('exams') as FormArray;\r\n  }\r\n\r\n  addtextFields() {\r\n    this.exams.push(this.fb.control(''));\r\n  }\r\n\r\n  // add dynamic text fields for adding exams\r\n\r\n  SetNumberOfExams(numberOfExams: number) {\r\n    this.showLabel = true;\r\n    this.disableBtn = false;\r\n    // remove text fields on change number of exams\r\n    this.profileForm = this.fb.group({\r\n      examNumber: [numberOfExams],\r\n      grading_system: [''],\r\n      exams: this.fb.array([])\r\n    });\r\n\r\n    for (let i = 0; i < numberOfExams; i++) {\r\n      this.addtextFields();\r\n    }\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // ***************************** Add new exam ************************/\r\n  // ******************************************************************* */\r\n\r\n  onSubmitAddExam() {\r\n    const exam_data = {\r\n      exams: this.profileForm.value.exams,\r\n      exam_date: 0,\r\n      exam_comment: '',\r\n      grading_method: this.profileForm.value.grading_system,\r\n      //exam_tmarks: '',\r\n      running_session: this.running_session,\r\n      type: 'exam'\r\n    };\r\n\r\n    this._addExamsService.addNewExamFun(exam_data).subscribe(result => {\r\n      if (result.status === 1) {\r\n        this._commonService.successToaster(\r\n          'Exam Added Successfully',\r\n          'Success!'\r\n        );\r\n\r\n        this.getExamsinfo();\r\n        this.closeModal();\r\n      } else {\r\n        this._commonService.errorToaster(result.msg, 'Failed!');\r\n      }\r\n    });\r\n  }\r\n\r\n  // public onClickAddExam(addExamEvent) {\r\n  //   let examMarks;\r\n  //   if (addExamEvent.value.grading_system === '1') {\r\n  //     examMarks = addExamEvent.value.exam_tmarks;\r\n  //   } else {\r\n  //     examMarks = '';\r\n  //   }\r\n\r\n  //   // ** convert selected time to Unix timestamp\r\n  //   const examUnixTime =\r\n  //     new Date(addExamEvent.value.exam_date).getTime() / 1000;\r\n  //   const exam_data = {\r\n  //     exam_name: addExamEvent.value.exam_name,\r\n  //     exam_date: examUnixTime,\r\n  //     exam_comment: addExamEvent.value.exam_comment,\r\n  //     grading_method: addExamEvent.value.grading_system,\r\n  //     exam_tmarks: examMarks,\r\n  //     running_session: this.running_session,\r\n  //     type: 'exam'\r\n  //   };\r\n\r\n  //   this._addExamsService.addNewExamFun(exam_data).subscribe(result => {\r\n  //     if (result.status === 1) {\r\n  //       this._commonService.successToaster(\r\n  //         'Exam Added Successfully',\r\n  //         'Success!'\r\n  //       );\r\n  //       addExamEvent.reset();\r\n  //       this.getExamsinfo();\r\n  //       this.closeModal();\r\n  //     } else {\r\n  //       this._commonService.errorToaster(result.msg, 'Failed!');\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // ********************************************************************** */\r\n  // ********************************* Delete Exams  *********************** */\r\n  // ********************************************************************* */\r\n\r\n  public onClickDelExam(exam_id: number) {\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: 'You wont be able to revert this!',\r\n      type: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!'\r\n    }).then(result => {\r\n      if (result.value) {\r\n        // if user confirm then call delete API\r\n        this._addExamsService.deleteExamsFun(exam_id).subscribe(resultresp => {\r\n          if (resultresp.status === 1) {\r\n            this._commonService.successToaster(\r\n              'Deleted Successfully',\r\n              'Success!'\r\n            );\r\n            this.getExamsinfo();\r\n          } else {\r\n            this._commonService.errorToaster(resultresp.msg, 'Error!');\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // **************************** Update Exams Data *********************** */\r\n  // ********************************************************************* */\r\n\r\n  public onClickUpdateExam(updateEventData) {\r\n    const update_exam_data = updateEventData.value;\r\n\r\n    const exam_id = update_exam_data.examId;\r\n    const exam_UpdateData = {\r\n      exam_name: update_exam_data.examName,\r\n      exam_comment: '',\r\n      exam_date: update_exam_data.examDate,\r\n      exam_tmarks: ''\r\n    };\r\n\r\n    this._addExamsService\r\n      .updateExamData(exam_UpdateData, exam_id)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this._commonService.successToaster(\r\n            'Updated Successfully',\r\n            'Success!'\r\n          );\r\n          // load new data after update\r\n          this.get_singleExamData(exam_id);\r\n          this.getExamsinfo();\r\n          this.closeModal();\r\n        } else {\r\n          this._commonService.errorToaster(result.msg, 'Error!');\r\n        }\r\n      });\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************General Methods********************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // get grading system\r\n  selectedGradingSystemF(gradingSystem) {\r\n    if (gradingSystem === '1') {\r\n      this.showTotalMarksField = true;\r\n    } else {\r\n      this.showTotalMarksField = false;\r\n    }\r\n  }\r\n\r\n  // new modal\r\n  openNgModal(content, size) {\r\n    this.modalService.open(content, { size: size });\r\n  }\r\n\r\n  // ********* Open exam update modal */\r\n  public openUpdateExamModal(modal, exam_id: number) {\r\n    this.openNgModal(modal, 'md');\r\n    this.get_singleExamData(exam_id);\r\n  }\r\n\r\n  // open modal\r\n  public openModal(modal) {\r\n    this.openNgModal(modal, 'md');\r\n  }\r\n\r\n  // close modal\r\n  public closeModal() {\r\n    this.modalService.dismissAll();\r\n    this.profileForm.reset();\r\n    this.showLabel = false;\r\n  }\r\n\r\n  pageChanged(pN: number): void {\r\n    this.pageNumber = pN;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { routing } from './exams.routing';\r\nimport { HttpModule } from '@angular/http';\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\nimport { SelectModule } from 'ng2-select';\r\nimport { ModalModule } from 'ngx-modal';\r\nimport { SearchExamPipe } from './searchexam.pipe';\r\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\r\n\r\nimport {\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  FormGroup,\r\n  FormControl,\r\n  Validators\r\n} from '@angular/forms';\r\n/* components */\r\nimport { ExamsComponent } from './exams.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    Ng2SearchPipeModule,\r\n    NgxPaginationModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    SelectModule,\r\n    ModalModule,\r\n    HttpModule,\r\n    routing\r\n  ],\r\n  declarations: [ExamsComponent, SearchExamPipe]\r\n})\r\nexport class ExamsModule {}\r\n","import { Routes, RouterModule } from \"@angular/router\";\r\nimport { ExamsComponent } from \"./exams.component\";\r\n\r\nconst childRoutes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: ExamsComponent\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(childRoutes);\r\n","import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({\r\n  name: \"examfilter\"\r\n})\r\nexport class SearchExamPipe implements PipeTransform {\r\n  transform(items: any[], filterdata: string): any[] {\r\n    if (!items) return [];\r\n    if (!filterdata) return items;\r\n\r\n    filterdata = filterdata.toString();\r\n    return items.filter(searchValue => {\r\n      let rVal =\r\n        JSON.stringify(searchValue.exam_name).includes(filterdata) ||\r\n        JSON.stringify(searchValue.exam_type).includes(filterdata);\r\n      return rVal;\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}