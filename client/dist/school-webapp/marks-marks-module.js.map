{"version":3,"sources":["webpack:///./src/app/marks/manage-marks.service.ts","webpack:///./src/app/marks/marks.component.html","webpack:///./src/app/marks/marks.component.scss","webpack:///./src/app/marks/marks.component.ts","webpack:///./src/app/marks/marks.module.ts","webpack:///./src/app/marks/marks.routing.ts","webpack:///./src/app/marks/search.pipe.ts"],"names":[],"mappings":"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","file":"marks-marks-module.js","sourcesContent":["// ******************** Node APIs path  MainProject/Routes/route.js *********************** */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport { GlobalService } from '../shared/services/global.service';\r\n\r\n@Injectable()\r\nexport class ManageMarksService {\r\n  constructor(private http: Http, private _globalService: GlobalService) {}\r\n\r\n  public headers = new Headers(this._globalService.constants.headers);\r\n  // get server link from global services\r\n  public serverLink = this._globalService.constants.serverLink;\r\n\r\n  // *********************************************************************************************************************** */\r\n  /********************************************Calling APIs  ************************************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ************************** Call API to get std , exam marks deatils to update . add marks   *******************************\r\n\r\n  getStdForMngMarks(\r\n    class_id,\r\n    section_id,\r\n    exam_id,\r\n    subject_id,\r\n    running_session,\r\n    subject_type\r\n  ) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          'get/stdForMngMarks/' +\r\n          class_id +\r\n          '/' +\r\n          section_id +\r\n          '/' +\r\n          exam_id +\r\n          '/' +\r\n          subject_id +\r\n          '/' +\r\n          running_session +\r\n          '/' +\r\n          subject_type,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // ************************** Call API to add exam marks against subjects  *******************************\r\n\r\n  addExamMarksF(stdMarksdata) {\r\n    return this.http\r\n      .post(this.serverLink + 'add/examMarks', stdMarksdata, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // ************************** Add quiz Images  *******************************\r\n\r\n  add_quiz_images(images_data) {\r\n    return this.http\r\n      .post(this.serverLink + 'quiz/images', images_data, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-12 \\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Exam Results</h4>\\r\\n                <form style=\\\"margin-top:2em;\\\" class=\\\"form-group\\\" #manageMarks=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmitMngMarks(manageMarks)\\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n\\r\\n                        <div class=\\\"col-md-2 form-group\\\">\\r\\n                            <label class=\\\"control-label\\\"> Exam *</label>\\r\\n                            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedExam.valid && pickedExam.touched\\\"><small>Exam\\r\\n                  Required</small></span>\\r\\n                            <select class=\\\"form-control fm-control\\\" required style=\\\"margin-top:0em;\\\" #pickedExam [(ngModel)]=\\\"exam\\\" (change)=submitExamIdF(pickedExam.value) name=\\\"exam\\\">\\r\\n                <option [ngValue]=\\\"undefined\\\" disabled>Select Exam</option>\\r\\n                <option *ngFor=\\\"let item of examsDataList\\\" [value]=\\\"item.exam_id\\\">{{item.exam_name}}</option>\\r\\n              </select>\\r\\n\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-2 form-group\\\">\\r\\n                            <label class=\\\"control-label\\\"> Class *</label>\\r\\n                            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedCLass.valid && pickedCLass.touched\\\"><small>Class\\r\\n                  Required</small></span>\\r\\n                            <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedCLass [(ngModel)]=\\\"classid\\\" (change)=classSelected(pickedCLass.value); name=\\\"classid\\\">\\r\\n                <option [ngValue]=\\\"undefined\\\" disabled>Select Class</option>\\r\\n                <option *ngFor=\\\"let item of classdataList\\\" [value]=\\\"item.class_id\\\">{{item.class_name}}</option>\\r\\n              </select>\\r\\n\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"col-md-2 form-group\\\">\\r\\n                            <label class=\\\"control-label\\\"> Section *</label>\\r\\n                            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedSection.valid && pickedSection.touched\\\"><small>Section\\r\\n                  Required</small></span>\\r\\n                            <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedSection [(ngModel)]=\\\"section\\\" (change)=\\\"sectionSelectedF(pickedSection.value)\\\" name=\\\"section\\\">\\r\\n                <option [ngValue]=\\\"undefined\\\" disabled>Select Section</option>\\r\\n                <option *ngFor=\\\"let item of sectionsList\\\" [value]=\\\"item.section_id\\\">{{item.section_name}}</option>\\r\\n              </select>\\r\\n\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"col-md-2 form-group\\\">\\r\\n                            <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\"> Subject * </label>\\r\\n                            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedSubject.valid && pickedSubject.touched\\\"><small>Subject\\r\\n                  required</small></span>\\r\\n\\r\\n                            <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedSubject [(ngModel)]=\\\"subject\\\" (change)=funSelectedSub(pickedSubject.value) name=\\\"subject\\\">\\r\\n                <option [ngValue]=\\\"undefined\\\" disabled>Select Subject</option>\\r\\n                <option *ngFor=\\\"let item of cSubjectsList\\\" [value]=\\\"item.subject_id + '-' + item.subject_type\\\">\\r\\n                  {{item.subject_name}}</option>\\r\\n              </select>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-2 form-group\\\" *ngIf=\\\"!showGrading\\\">\\r\\n                            <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\"> Subject Total Marks * </label>\\r\\n                            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedTMarks.valid && pickedTMarks.touched\\\"><small>Total Marks\\r\\n                  required</small></span>\\r\\n\\r\\n                            <input type=\\\"number\\\" required class=\\\"form-control fm-control\\\" name=\\\"subj_total_marks\\\" #pickedTMarks [(ngModel)]=\\\"subj_total_marks\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"col-md-2 form-group\\\" style=\\\"text-align: center ; \\\">\\r\\n                            <input type=\\\"submit\\\" class=\\\"btn btn-info\\\" style=\\\"margin-top:2em\\\" [disabled]=\\\"!manageMarks.form.valid || disableBtn\\\" value=\\\"Manage Marks\\\">\\r\\n\\r\\n                        </div>\\r\\n                        <div style=\\\"text-align: center\\\">\\r\\n                            <h5 style=\\\"color: red;\\\"> {{studentAvailabe}}</h5>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n                <div class=\\\"col-lg-12\\\" style=\\\"text-align:center;\\\">\\r\\n                    <span style=\\\"color:red;\\\">{{ dbRespMsg }}</span>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\" *ngIf=\\\"showtable\\\">\\r\\n    <div class=\\\"col-lg-12 col-md-12\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <div style=\\\"margin-top: -3em; text-align: center; margin-bottom: 3em;\\\" class=\\\"mini-heading\\\">\\r\\n                    <h3> Manage Exam Results</h3>\\r\\n                    <h4>\\r\\n                        Class : {{selectedClassName}}\\r\\n                    </h4>\\r\\n                    <h4> Section : {{selectedClsSection}}\\r\\n                    </h4>\\r\\n                    <!-- <h4> Exam Date : {{examDate * 1000 | date}}\\r\\n                    </h4> -->\\r\\n                    <h4 *ngIf=\\\"!showGrading\\\"> Subject Total Marks : {{ subj_total_marks }}\\r\\n                    </h4>\\r\\n\\r\\n                </div>\\r\\n                <hr>\\r\\n\\r\\n                <div class=\\\"row\\\" style=\\\"margin-top: 1em; margin-bottom: 0em; padding-bottom: 1.5em; padding-top: 0em;\\\">\\r\\n                    <div class=\\\"col-lg-4\\\">\\r\\n                        <input class=\\\"form-control fm-control\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Roll Num / Student Name\\\">\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n                <table class=\\\"table table-bordered table-hover\\\">\\r\\n                    <thead *ngIf=\\\"(grading_type == 1)\\\">\\r\\n                        <tr>\\r\\n                            <th>S.No</th>\\r\\n                            <th>Roll Num</th>\\r\\n                            <th>Name </th>\\r\\n                            <!-- <th>Total Marks</th> -->\\r\\n\\r\\n                            <th>Obtained Marks</th>\\r\\n\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n\\r\\n                    <thead *ngIf=\\\"(grading_type == 2)\\\">\\r\\n                        <tr>\\r\\n                            <th>S.No</th>\\r\\n                            <th>Roll Num</th>\\r\\n                            <th>Name </th>\\r\\n\\r\\n                            <th> Update Grading</th>\\r\\n                            <!-- <th>Update</th> -->\\r\\n\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n\\r\\n                    <tbody *ngIf=\\\"(grading_type == 1)\\\">\\r\\n                        <tr *ngFor=\\\"let item of stdExamMarksList | filter : searchText  | paginate: { id: 'pager', itemsPerPage: pageSize, currentPage: pageNumber};let index = index\\\">\\r\\n\\r\\n                            <td>{{index + 1}}</td>\\r\\n                            <td>{{item.roll_num}}</td>\\r\\n                            <td>{{item.std_name}}</td>\\r\\n\\r\\n                            <td>\\r\\n\\r\\n                                <input type=\\\"number\\\" name=\\\"obt_marks\\\" #oMarks [(ngModel)]=\\\"item.obtained_marks\\\" (change)=\\\"addExamMarks(item.class_id,item.section_id,item.std_id,oMarks.value, 1)\\\">\\r\\n\\r\\n                            </td>\\r\\n\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n\\r\\n                    <tbody *ngIf=\\\"(grading_type == 2)\\\">\\r\\n                        <tr *ngFor=\\\"let item of stdExamMarksList | filter : searchText  | paginate: { id: 'pager', itemsPerPage: pageSize, currentPage: pageNumber};let index = index\\\">\\r\\n\\r\\n                            <td>{{index + 1}}</td>\\r\\n                            <td>{{item.roll_num}}</td>\\r\\n                            <td>{{item.std_name}}</td>\\r\\n\\r\\n                            <!-- <td>{{ item.obtained_marks }}</td> -->\\r\\n\\r\\n                            <td>\\r\\n\\r\\n                                <select #gradingaction class=\\\"form-group\\\" name=\\\"userselectedgrade\\\" (change)=\\\"addExamMarks(item.class_id,item.section_id,item.std_id,gradingaction.value, 2)\\\" title=\\\"Actions\\\">\\r\\n                  <option hidden value=\\\"\\\" disabled selected>Select Grade </option>\\r\\n                  <option value='A1' [selected]=\\\"item.obtained_marks == 'A1'\\\"> A1 </option>\\r\\n                  <option value='A+' [selected]=\\\"item.obtained_marks == 'A+'\\\"> A+ </option>\\r\\n                  <option value='A' [selected]=\\\"item.obtained_marks == 'A'\\\"> A </option>\\r\\n                  <option value='B' [selected]=\\\"item.obtained_marks == 'B'\\\"> B </option>\\r\\n                  <option value='C' [selected]=\\\"item.obtained_marks == 'C'\\\"> C </option>\\r\\n                  <option value='D' [selected]=\\\"item.obtained_marks == 'D'\\\"> D</option>\\r\\n                </select>\\r\\n                            </td>\\r\\n\\r\\n                            <!--\\r\\n                            <td>\\r\\n                                <label class=\\\"badge badge-info\\\" style=\\\"cursor: pointer;\\\" (click)=\\\"addExamMarks(item.class_id,item.section_id,item.std_id,gradingaction.value, 2)\\\">Update\\r\\n                  Grade </label>\\r\\n                            </td> -->\\r\\n\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n\\r\\n                </table>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<!-- *********************************** Modals **************************************** -->\\r\\n\\r\\n<!-- ******** Update Quiz Marks ************ -->\\r\\n\\r\\n<ng-template #updateQuizMarksModel let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Update Quiz Marks</h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <form class=\\\"form-group\\\" #updateQMarks=\\\"ngForm\\\" (ngSubmit)=\\\"onClickUpdateQuizMarks(updateQMarks)\\\">\\r\\n\\r\\n            <label class=\\\"control-label\\\"> Exam Total Marks</label>\\r\\n\\r\\n            <input type=\\\"text\\\" required class=\\\"form-control fm-control\\\" name=\\\"examTMarks\\\" placeholder=\\\"Exam Total Marks\\\" [(ngModel)]=\\\"examTMarks\\\" #pickedexamTMarks=\\\"ngModel\\\">\\r\\n            <p style=\\\"color: red\\\" *ngIf=\\\"!pickedexamTMarks.valid && pickedexamTMarks.touched\\\" style=\\\"margin-top:1em; margin-left:0em;\\\">\\r\\n                Required!\\r\\n            </p>\\r\\n            <label class=\\\"control-label\\\">Obtained Marks</label>\\r\\n            <input type=\\\"number\\\" required class=\\\"form-control fm-control\\\" name=\\\"q_obtained_marks\\\" [(ngModel)]=\\\"q_obtained_marks\\\" #pickedqobtained_marks=\\\"ngModel\\\">\\r\\n            <!-- <p class=\\\"alert alert-danger\\\" *ngIf=\\\"!pickedqobtained_marks.valid && pickedqobtained_marks.touched\\\"\\r\\n              style=\\\"margin-top:1em; margin-left:0em;\\\">\\r\\n              Required!\\r\\n            </p> -->\\r\\n\\r\\n            <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\"> Quiz Images <span style=\\\"color:red;\\\">\\r\\n        </span></label>\\r\\n            <input id=\\\"quiz_image\\\" #imageFile accept=\\\"image/*\\\" class=\\\"form-control fm-control\\\" name=\\\"quiz_image\\\" type=\\\"file\\\" (change)=\\\"fileChangeEvent($event)\\\" placeholder=\\\"Upload a file...\\\" multiple />\\r\\n            <div class=\\\"modal_button\\\" style=\\\"text-align:right\\\">\\r\\n\\r\\n                <input type=\\\"submit\\\" class=\\\"btn btn-info\\\" [disabled]=\\\"!updateQMarks.form.valid\\\" value=\\\"Update\\\" style=\\\"margin-top: 1em;\\\">\\r\\n            </div>\\r\\n        </form>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"modal.close('Close click')\\\">Close</button>\\r\\n    </div>\\r\\n</ng-template>\"","module.exports = \"\"","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport swal from 'sweetalert2';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CommonService } from '../shared/services/common.service';\r\nimport { StudentsInfoService } from '../students/student-information.service';\r\nimport { SectionDataService } from '../sections/manageSection.service';\r\nimport { ClassDataService } from '../classes/manageClass.service';\r\nimport { SubjectsDataService } from '../subjects/manage-subjects.service';\r\nimport { AddExamsService } from '../exams/add-exams.service';\r\nimport { ManageMarksService } from './manage-marks.service';\r\n\r\n@Component({\r\n  selector: 'app-marks',\r\n  templateUrl: './marks.component.html',\r\n  styleUrls: ['./marks.component.scss'],\r\n  providers: [\r\n    StudentsInfoService,\r\n    ClassDataService,\r\n    SectionDataService,\r\n    AddExamsService,\r\n    SubjectsDataService,\r\n    ManageMarksService,\r\n    CommonService\r\n  ]\r\n})\r\nexport class MarksComponent implements OnInit {\r\n  // reset image filed after submit\r\n  @ViewChild('imageFile')\r\n  myInputVariable: ElementRef;\r\n\r\n  // default\r\n\r\n  public tabtitle = 'Manage Marks';\r\n  public pageSize = 10;\r\n  public pageNumber = 1;\r\n  /* active session */\r\n  public running_session = localStorage.getItem('running_session');\r\n\r\n  // variables\r\n  public getSelectedExam: string;\r\n  public getSelectedSubject: string;\r\n  public selectedClass: string;\r\n  public selectedClassName = '';\r\n  public selectedClsSection: any;\r\n  public selectedSubject: string;\r\n  public examDate: any;\r\n  public examTMarks: any;\r\n  public obtained_marks: number;\r\n  public selectedExamId: number;\r\n  public selectedexamType = '';\r\n  public subj_total_marks;\r\n\r\n  // quiz marks\r\n  public q_obtained_marks: number;\r\n  public quiz_images: Array<any>;\r\n  public q_section_id;\r\n  public q_class_id;\r\n  public q_std_id;\r\n\r\n  // Arrays\r\n  public classdataList: Array<any>;\r\n  public sectionsList: Array<any>;\r\n\r\n  public examList: Array<any>;\r\n  public cSubjectsList: Array<any>;\r\n  public examsDataList: Array<any>;\r\n  public stdExamMarksList: Array<any>;\r\n\r\n  public dataresult: Array<any>;\r\n\r\n  public filesToUpload: Array<File> = [];\r\n\r\n  // notification\r\n  public disableBtn = true;\r\n  public dbRespMsg = '';\r\n  public updatemarksMsg = '';\r\n  public manageMArksStatus = false;\r\n  public alertType = '';\r\n\r\n  public showtable = false;\r\n  public grading_type;\r\n  showGrading = true;\r\n\r\n  // dropdown variables\r\n  public exam: number;\r\n  public classid: number;\r\n  public section: number;\r\n  public subject: number;\r\n\r\n  public selected_subject_type;\r\n\r\n  // error free\r\n  public studentAvailabe;\r\n  public loadData;\r\n  public exam_type;\r\n  public searchText;\r\n\r\n  // create instance of services to access method from services\r\n  constructor(\r\n    private _classDataService: ClassDataService,\r\n    private _sectionDataService: SectionDataService,\r\n    private _addExamsService: AddExamsService,\r\n    private _subjectsDataService: SubjectsDataService,\r\n    private _manageMarksService: ManageMarksService,\r\n    private modalService: NgbModal,\r\n    private _commonService: CommonService\r\n  ) {}\r\n\r\n  // this function auto called when component loads\r\n  ngOnInit() {\r\n    this.getClassData(); // get class data\r\n    this.getExamsinfo();\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Read Data from DB Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Get all Classes data ************************/\r\n  // ******************************************************************* */\r\n\r\n  public getClassData() {\r\n    this._classDataService.getClassesF().subscribe(result => {\r\n      this.classdataList = result;\r\n    });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Get all exams data ************************/\r\n  // ******************************************************************* */\r\n\r\n  public getExamsinfo() {\r\n    this._addExamsService\r\n      .getExamInfoFun(this.running_session)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this.examsDataList = result.data;\r\n        }\r\n        if (result.status === 0) {\r\n          this.dbRespMsg = 'No exam is added';\r\n        }\r\n\r\n        if (result.status === 403) {\r\n          this.dbRespMsg = result.msg;\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // ************ Get Section Data Against Selected Class ***************** */\r\n  // ********************************************************************* */\r\n\r\n  public getSectionByClassID(class_id) {\r\n    this.selectedClass = class_id;\r\n    // * disbale btn untill section selcted and empty section array when selected class change\r\n    this.sectionsList = [];\r\n    this.cSubjectsList = [];\r\n    this.selectedClsSection = ''; // unset the varibale on selected class  changed\r\n    this.selectedClassName = ''; //\r\n    this.disableBtn = true;\r\n\r\n    this._sectionDataService.getSectionF(class_id).subscribe(result => {\r\n      this.sectionsList = result;\r\n    });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // ******* Get Elective And Core Subject Data by Class ID section ID **************** */\r\n  // ********************************************************************* */\r\n\r\n  public getSubjectByClassSecId(class_id, section_id, subjects_type) {\r\n    this.cSubjectsList = [];\r\n    this.disableBtn = true;\r\n    // *** get Core subjects\r\n\r\n    this._subjectsDataService\r\n      .getSubjectByClassSecIdF(class_id, section_id, this.running_session)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this.cSubjectsList = result.data;\r\n          this.selectedClassName = this.cSubjectsList[0].class_name;\r\n          this.selectedClsSection = this.cSubjectsList[0].section_name;\r\n        }\r\n        if (result.status === 0) {\r\n          this.dbRespMsg = 'No subject is added against class';\r\n        }\r\n\r\n        if (result.status === 403) {\r\n          this.dbRespMsg = result.msg;\r\n        }\r\n      });\r\n  }\r\n\r\n  // *********************************************************************************** */\r\n  // ***** Get students details against class and section to mark numbers against exams **** */\r\n  // ************************************************************************************ */\r\n\r\n  public getStudentMarks(\r\n    class_id,\r\n    section_id,\r\n    exam_id,\r\n    subject_id,\r\n    subject_type\r\n  ) {\r\n    this.stdExamMarksList = [];\r\n    this.getSelectedExam = '';\r\n    this.examDate = '';\r\n    this.examTMarks = '';\r\n    this.showtable = true;\r\n    this.dbRespMsg = '';\r\n\r\n    this._manageMarksService\r\n      // call function to get student marks details against selected subject to mark marks or update marks\r\n      .getStdForMngMarks(\r\n        class_id,\r\n        section_id,\r\n        exam_id,\r\n        subject_id,\r\n        this.running_session,\r\n        subject_type\r\n      )\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          // comp prev added total marks with new t marks\r\n          if (\r\n            result.data[0].total_marks !== null &&\r\n            Number(this.grading_type) === 1\r\n          ) {\r\n            if (result.data[0].total_marks !== this.subj_total_marks) {\r\n              swal(\r\n                'Invalid Total Marks!',\r\n                'Total Marks doesnt match with previously added total marks ' +\r\n                  result.data[0].total_marks,\r\n                'warning'\r\n              );\r\n              this.showtable = false;\r\n              return false;\r\n            } else {\r\n              this.stdExamMarksList = result.data;\r\n              this.getSelectedExam = this.stdExamMarksList[0].exam_name;\r\n              this.examDate = this.stdExamMarksList[0].exam_date;\r\n              this.examTMarks = this.stdExamMarksList[0].exam_tmarks;\r\n            }\r\n          } else {\r\n            this.stdExamMarksList = result.data;\r\n            this.getSelectedExam = this.stdExamMarksList[0].exam_name;\r\n            this.examDate = this.stdExamMarksList[0].exam_date;\r\n            this.examTMarks = this.stdExamMarksList[0].exam_tmarks;\r\n          }\r\n        }\r\n        if (result.status === 0) {\r\n          this.showtable = false;\r\n          this.dbRespMsg = 'No students  added against class';\r\n        }\r\n\r\n        if (result.status === 403) {\r\n          this.showtable = false;\r\n          this.dbRespMsg = result.msg;\r\n        }\r\n      });\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Add Update  Data  Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ************************************************************************************************************* */\r\n  /*********************************************Store Assignment Images in Array******************************** */\r\n  // ************************************************************************************************************* */\r\n\r\n  public fileChangeEvent(fileInput: any) {\r\n    this.filesToUpload = <Array<File>>fileInput.target.files;\r\n    // this.product.photo = fileInput.target.files[0]['name'];\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // ********* Mark student marks against  subject *************************/\r\n  // ******************************************************************* */\r\n\r\n  public addExamMarks(\r\n    class_id,\r\n    section_id,\r\n    std_id,\r\n    obtained_marks_grade,\r\n    grading_type\r\n  ) {\r\n    this.updatemarksMsg = '';\r\n\r\n    if (+grading_type === 1) {\r\n      if (obtained_marks_grade === '') {\r\n        swal('oops!', 'Kindly enter the obtained marks.', 'warning');\r\n        return false;\r\n      }\r\n\r\n      if (obtained_marks_grade > this.subj_total_marks) {\r\n        swal(\r\n          'Oops...',\r\n          'Obtained marks must be less than total marks ' +\r\n            this.subj_total_marks +\r\n            '.',\r\n          'warning'\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (+grading_type === 2) {\r\n      if (obtained_marks_grade === '') {\r\n        swal('oops!', 'Kindly enter Grade.', 'warning');\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // if grading method is percent grading than obtained letter grades else numbers.\r\n    const obtained_marks = obtained_marks_grade;\r\n    const totalMarks = +grading_type === 1 ? Number(this.subj_total_marks) : '';\r\n    // if grading method is Letter grading\r\n\r\n    const stdMarksdata = {\r\n      class_id: class_id,\r\n      section_id: section_id,\r\n      student_id: std_id,\r\n      obtained_marks: obtained_marks,\r\n      total_marks: totalMarks,\r\n      subject_id: Number(this.selectedSubject),\r\n      running_session: this.running_session,\r\n      exam_id: Number(this.selectedExamId),\r\n      exam_type: 'exam'\r\n    };\r\n\r\n    // call function to add exam marks against selected subject\r\n    this._manageMarksService.addExamMarksF(stdMarksdata).subscribe(result => {\r\n      if (result.status === 1) {\r\n        this._commonService.successToaster('Updated Successfully', 'Success!');\r\n        const subject_type = this.selected_subject_type; // need param to call function\r\n        // call function to load data after update marks\r\n        this.getStudentMarks(\r\n          class_id,\r\n          section_id,\r\n          this.selectedExamId,\r\n          this.selectedSubject,\r\n          subject_type\r\n        );\r\n      } else {\r\n        this._commonService.errorToaster(result.msg, 'Error!');\r\n      }\r\n    });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // ********* Update Quiz  marks *************************/\r\n  // ******************************************************************* */\r\n\r\n  onClickUpdateQuizMarks(submitEvent) {\r\n    // get quiz images\r\n\r\n    const imagesData: any = new FormData();\r\n    const files: Array<File> = this.filesToUpload;\r\n    // console.log(files);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      imagesData.append('uploads[]', files[i], files[i]['name']);\r\n    }\r\n\r\n    // quiz details\r\n    const stdMarksdata = {\r\n      class_id: this.q_class_id,\r\n      section_id: this.q_section_id,\r\n      student_id: this.q_std_id,\r\n      obtained_marks: Number(submitEvent.value.q_obtained_marks),\r\n      total_marks: Number(submitEvent.value.examTMarks),\r\n      subject_id: Number(this.selectedSubject),\r\n      running_session: this.running_session,\r\n      exam_id: Number(this.selectedExamId),\r\n      exam_type: this.selectedexamType\r\n    };\r\n\r\n    // call function to add exam marks against selected subject\r\n    this._manageMarksService.addExamMarksF(stdMarksdata).subscribe(result => {\r\n      if (result.status === 1) {\r\n        // data store in tbl_images with quiz images\r\n        const id = JSON.stringify(result.inserted_id);\r\n        imagesData.append('source_id', id); // student quiz id\r\n        imagesData.append('source_type', 'quiz');\r\n\r\n        // this.myInputVariable.nativeElement.value = '';\r\n\r\n        // calling add quiz images API\r\n        this._manageMarksService\r\n          .add_quiz_images(imagesData)\r\n          .subscribe(resultresp => {\r\n            this.filesToUpload = [];\r\n          });\r\n\r\n        this._commonService.successToaster('Updated Successfully', 'Success!');\r\n        const subject_type = this.selected_subject_type; // need param to call function\r\n        // call function to load data after update marks\r\n        this.getStudentMarks(\r\n          this.q_class_id,\r\n          this.q_section_id,\r\n          this.selectedExamId,\r\n          this.selectedSubject,\r\n          subject_type\r\n        );\r\n      } else {\r\n        this._commonService.errorToaster('Server error try again', 'Error!');\r\n      }\r\n    });\r\n  }\r\n\r\n  // ************************************************************************************************************* */\r\n  /*********************************************General   Methods************************************************ */\r\n  // ************************************************************************************************************* */\r\n\r\n  // new modal\r\n  openNgModal(content, size) {\r\n    this.modalService.open(content, { size: size });\r\n  }\r\n\r\n  // *** Selected section class id to get subjects */\r\n\r\n  public sectionSelectedF(section_id) {\r\n    const subject_type = 'c';\r\n    this.getSubjectByClassSecId(this.selectedClass, section_id, subject_type);\r\n  }\r\n\r\n  // *** get sections against class for dropdown\r\n  public classSelected(class_id) {\r\n    this.getSectionByClassID(class_id);\r\n  }\r\n\r\n  // selected subject id\r\n\r\n  public funSelectedSub(subject_id) {\r\n    this.selectedSubject = '';\r\n\r\n    const subject_id_type = subject_id.split('-');\r\n    this.selectedSubject = subject_id_type[0];\r\n    this.selected_subject_type = subject_id_type[1];\r\n    this.enableBtn();\r\n  }\r\n\r\n  // selected exam id\r\n  public submitExamIdF(exam_id) {\r\n    this.showtable = false;\r\n    this.selectedExamId = exam_id;\r\n\r\n    this.grading_type = this.searchGradingType(exam_id);\r\n\r\n    if (+this.grading_type === 1) {\r\n      this.showGrading = false;\r\n    } else {\r\n      this.showGrading = true;\r\n    }\r\n  }\r\n\r\n  public submitExamTypeF(exam_type) {\r\n    this.selectedexamType = exam_type;\r\n    this.examsDataList = [];\r\n    this.getExamsinfo(); // get exam data against selected type\r\n  }\r\n\r\n  // **************** on submit manage core subject marks ********************\r\n  public onSubmitMngMarks(submitEvent) {\r\n    const eventData = submitEvent.value;\r\n\r\n    const class_id = Number(eventData.classid);\r\n    const section_id = Number(eventData.section);\r\n    const exam_id = Number(eventData.exam);\r\n\r\n    const subject_id_type = eventData.subject.split('-');\r\n    const subject_id = subject_id_type[0];\r\n    const subject_type = subject_id_type[1];\r\n\r\n    this.getStudentMarks(\r\n      class_id,\r\n      section_id,\r\n      exam_id,\r\n      subject_id,\r\n      subject_type\r\n    );\r\n  }\r\n\r\n  // ****************** on submit manage elective subjects ******************\r\n\r\n  public onSubmitMngESubjMarks(submitEvent) {\r\n    const eventData = submitEvent.value;\r\n\r\n    const class_id = Number(eventData.classid);\r\n    const section_id = Number(eventData.section);\r\n    const exam_id = Number(eventData.exam);\r\n    const subject_id = Number(eventData.subject);\r\n    const subject_type = 'elective';\r\n    this.getStudentMarks(\r\n      class_id,\r\n      section_id,\r\n      exam_id,\r\n      subject_id,\r\n      subject_type\r\n    );\r\n  }\r\n\r\n  // ************** upload quiz marks , open modal , upload images  ***********\r\n\r\n  public updateQuizModal(modal, class_id, section_id, std_id, index) {\r\n    this.openNgModal(modal, 'md');\r\n    this.q_obtained_marks = this.stdExamMarksList[index].obtained_marks;\r\n    this.q_section_id = section_id;\r\n    this.q_class_id = class_id;\r\n    this.q_std_id = std_id;\r\n  }\r\n\r\n  /********************************* pagination Info ****************************/\r\n\r\n  public pageChanged(pN: number): void {\r\n    this.pageNumber = pN;\r\n  }\r\n\r\n  // enable manage attendance btn when section isnt empty\r\n  public enableBtn() {\r\n    this.disableBtn = false;\r\n  }\r\n\r\n  // hide success toaster after 2 secs\r\n  public FadeOutToaster() {\r\n    setTimeout(() => {\r\n      // this.attendanceNotifiction = 0;\r\n    }, 1000);\r\n  }\r\n\r\n  public FadeOutUpdateErrorToaster() {\r\n    setTimeout(() => {\r\n      this.manageMArksStatus = false;\r\n    }, 3000);\r\n  }\r\n\r\n  // open modal\r\n  public openModal(modal) {\r\n    this.openNgModal(modal, 'md');\r\n  }\r\n\r\n  // close modal\r\n  public closeModal(modal) {\r\n    modal.close();\r\n  }\r\n\r\n  // return grading type against exam id\r\n  public searchGradingType(examid: number) {\r\n    for (let i = 0; i < this.examsDataList.length; i++) {\r\n      if (+this.examsDataList[i].exam_id === +examid) {\r\n        return this.examsDataList[i].grading_method;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { routing } from './marks.routing';\r\nimport { HttpModule } from '@angular/http';\r\n\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\nimport { SelectModule } from 'ng2-select';\r\nimport { ModalModule } from 'ngx-modal';\r\nimport { SearchPipe } from './search.pipe';\r\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\r\n\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n/* components */\r\nimport { MarksComponent } from './marks.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    Ng2SearchPipeModule,\r\n    NgxPaginationModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    SelectModule,\r\n    ModalModule,\r\n    HttpModule,\r\n    routing\r\n  ],\r\n  declarations: [MarksComponent, SearchPipe]\r\n})\r\nexport class MarksModule {}\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { MarksComponent } from './marks.component';\r\n\r\nconst childRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MarksComponent\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(childRoutes);\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'filter'\r\n})\r\nexport class SearchPipe implements PipeTransform {\r\n  transform(items: any[], filterdata: string): any[] {\r\n    if (!items) { return []; }\r\n    if (!filterdata) { return items; }\r\n\r\n    filterdata = filterdata.toString();\r\n    return items.filter(searchValue => {\r\n      const rVal =\r\n        JSON.stringify(searchValue.roll_num).includes(filterdata) ||\r\n        JSON.stringify(searchValue.std_name).includes(filterdata);\r\n      return rVal;\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}