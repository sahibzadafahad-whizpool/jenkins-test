{"version":3,"sources":["webpack:///./src/app/assignments/assignments.component.html","webpack:///./src/app/assignments/assignments.component.scss","webpack:///./src/app/assignments/assignments.component.ts","webpack:///./src/app/assignments/assignments.module.ts","webpack:///./src/app/assignments/assignments.routing.ts","webpack:///./src/app/assignments/assignments.service.ts"],"names":[],"mappings":"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","file":"assignments-assignments-module.js","sourcesContent":["module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12 col-lg-12\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n\\r\\n                <h4 class=\\\"card-title\\\">Assignments Information</h4>\\r\\n\\r\\n\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"pull-right col-lg-12\\\">\\r\\n                        <div class=\\\"col-lg-3 pull-right \\\" style=\\\"padding-bottom: 1.5em;\\\">\\r\\n\\r\\n                            <button _ngcontent-c2=\\\"\\\" (click)=\\\"openNgModal(addAssignMarksModel ,'lg')\\\" class=\\\"btn btn-success btn-block\\\">New\\r\\n                Assignment\\r\\n                <i _ngcontent-c2=\\\"\\\" class=\\\"mdi mdi-plus\\\"></i></button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n\\r\\n                    <div class=\\\"col-lg-12 col-md-12\\\">\\r\\n                        <hr>\\r\\n                        <form style=\\\"margin-top:2em;\\\" class=\\\"form-group\\\" #getAssignment=\\\"ngForm\\\" (ngSubmit)=\\\"getAssignments(getAssignment)\\\">\\r\\n                            <div class=\\\"row\\\">\\r\\n\\r\\n\\r\\n                                <div class=\\\"col-md-4 form-group\\\">\\r\\n                                    <label class=\\\"control-label\\\"> Class *</label>\\r\\n                                    <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedgCLass.valid && pickedgCLass.touched\\\"><small>Class\\r\\n                      Required</small></span>\\r\\n                                    <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedgCLass [(ngModel)]=\\\"g_class_id\\\" (change)=classSelected(pickedgCLass.value); name=\\\"g_class_id\\\">\\r\\n                    <option [ngValue]=\\\"undefined\\\" disabled>Select Class</option>\\r\\n                    <option *ngFor=\\\"let item of classdataList\\\" [value]=\\\"item.class_id\\\">{{item.class_name}}</option>\\r\\n                  </select>\\r\\n\\r\\n                                </div>\\r\\n\\r\\n                                <div class=\\\"col-md-4 form-group\\\">\\r\\n                                    <label class=\\\"control-label\\\"> Section *</label>\\r\\n                                    <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedgSection.valid && pickedgSection.touched\\\"><small>Section\\r\\n                      Required</small></span>\\r\\n                                    <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedgSection [(ngModel)]=\\\"g_section_id\\\" (change)=\\\"sectionSelectedF(pickedgSection.value)\\\" name=\\\"g_section_id\\\">\\r\\n                    <option [ngValue]=\\\"undefined\\\" disabled>Select Section</option>\\r\\n                    <option *ngFor=\\\"let item of sectionsList\\\" [value]=\\\"item.section_id\\\">{{item.section_name}}</option>\\r\\n                  </select>\\r\\n\\r\\n                                </div>\\r\\n\\r\\n                                <div class=\\\"col-md-4 form-group\\\">\\r\\n                                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\"> Subject * </label>\\r\\n                                    <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedUSubject.valid && pickedUSubject.touched\\\"><small>Subject\\r\\n                      required</small></span>\\r\\n\\r\\n                                    <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedUSubject [(ngModel)]=\\\"g_subject_id\\\" (change)=funSelectedSub(pickedUSubject.value) name=\\\"g_subject_id\\\">\\r\\n                    <option [ngValue]=\\\"undefined\\\" disabled>Select Subject</option>\\r\\n                    <option *ngFor=\\\"let item of cSubjectsList\\\" [value]=\\\"item.subject_id + '-' + item.subject_type\\\">\\r\\n                      {{item.subject_name}}</option>\\r\\n                  </select>\\r\\n                                </div>\\r\\n\\r\\n                                <div class=\\\"col-md-12 form-group\\\" style=\\\"text-align: center\\\">\\r\\n                                    <input type=\\\"submit\\\" class=\\\"btn btn-info\\\" style=\\\"margin-top:1em\\\" [disabled]=\\\"!getAssignment.form.valid || disableBtn\\\" value=\\\"List Assignments\\\">\\r\\n\\r\\n                                </div>\\r\\n                                <div style=\\\"text-align: center\\\">\\r\\n                                    <h5 style=\\\"color: red;\\\"> {{studentAvailabe}}</h5>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </form>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\" *ngIf=\\\"showHeading\\\">\\r\\n\\r\\n                    <div class=\\\"col-lg-12 col-md-12\\\">\\r\\n\\r\\n                        <div style=\\\"text-align: center;\\\" class=\\\"mini-heading\\\">\\r\\n                            <h3> List Assignment Details</h3>\\r\\n                            <h4>\\r\\n                                Class : {{selectedClassName}}\\r\\n                            </h4>\\r\\n                            <h4> Section : {{selectedClsSection}}\\r\\n                            </h4>\\r\\n                        </div>\\r\\n                        <hr>\\r\\n                        <div style=\\\"height:50px;\\\">\\r\\n\\r\\n                        </div>\\r\\n\\r\\n                        <table class=\\\"table table-bordered table-hover\\\">\\r\\n                            <thead class=\\\"thead-light\\\">\\r\\n                                <tr>\\r\\n                                    <th>S.No</th>\\r\\n                                    <th>Assignment Title</th>\\r\\n                                    <th>Subject </th>\\r\\n                                    <th> Created on</th>\\r\\n                                    <th> Due on </th>\\r\\n                                    <th> Total Marks</th>\\r\\n\\r\\n                                    <th> Actions</th>\\r\\n\\r\\n\\r\\n                                </tr>\\r\\n                            </thead>\\r\\n                            <tbody>\\r\\n                                <tr *ngFor=\\\"let item of assignments_Data | paginate: { id: 'pager', itemsPerPage: pageSize, currentPage: pageNumber};let index = index\\\">\\r\\n\\r\\n                                    <td>{{index + 1}}</td>\\r\\n                                    <td>{{item.title}}</td>\\r\\n                                    <td>{{item.subject_name}}</td>\\r\\n                                    <td>{{item.assign_created_date * 1000 | date}}</td>\\r\\n                                    <td>{{item.assign_due_date * 1000 | date}}</td>\\r\\n\\r\\n                                    <td>{{item.assign_tMarks}}</td>\\r\\n\\r\\n                                    <td> <label style=\\\"cursor: pointer;\\\" (click)=\\\"updateAssignmentModal(updateAssignMarksModel,item.assign_id,item.assign_tMarks,index)\\\" class=\\\"badge badge-info\\\">Update Marks </label></td>\\r\\n                                </tr>\\r\\n                            </tbody>\\r\\n                        </table>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<!-- *********************************** Modals **************************************** -->\\r\\n\\r\\n\\r\\n<!-- ******** Add Assignment marks ************ -->\\r\\n\\r\\n\\r\\n<ng-template #addAssignMarksModel let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Add Assignment Marks</h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n    <form class=\\\"form-group\\\" #addAssignment=\\\"ngForm\\\" (ngSubmit)=\\\"onClickAddAssignment(addAssignment)\\\">\\r\\n        <div class=\\\"modal-body\\\">\\r\\n\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\"> Class *</label>\\r\\n                    <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedCLass.valid && pickedCLass.touched\\\"><small>Class\\r\\n              Required</small></span>\\r\\n                    <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedCLass [(ngModel)]=\\\"classid\\\" (change)=classSelected(pickedCLass.value); name=\\\"classid\\\">\\r\\n            <option [ngValue]=\\\"undefined\\\" disabled>Select Class</option>\\r\\n            <option *ngFor=\\\"let item of classdataList\\\" [value]=\\\"item.class_id\\\">{{item.class_name}}</option>\\r\\n          </select>\\r\\n\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\"> Section *</label>\\r\\n                    <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedSection.valid && pickedSection.touched\\\"><small>Section\\r\\n              Required</small></span>\\r\\n                    <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedSection [(ngModel)]=\\\"sectionid\\\" (change)=\\\"sectionSelectedF(pickedSection.value)\\\" name=\\\"sectionid\\\">\\r\\n            <option [ngValue]=\\\"undefined\\\" disabled>Select Section</option>\\r\\n            <option *ngFor=\\\"let item of sectionsList\\\" [value]=\\\"item.section_id\\\">{{item.section_name}}</option>\\r\\n          </select>\\r\\n\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\"> Subject * </label>\\r\\n                    <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedSubject.valid && pickedSubject.touched\\\"><small>Subject\\r\\n              required</small></span>\\r\\n\\r\\n                    <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedSubject [(ngModel)]=\\\"subjectid\\\" (change)=funSelectedSub(pickedSubject.value) name=\\\"subjectid\\\">\\r\\n            <option [ngValue]=\\\"undefined\\\" disabled>Select Subject</option>\\r\\n            <option *ngFor=\\\"let item of cSubjectsList\\\" [value]=\\\"item.subject_id\\\">{{item.subject_name}}\\r\\n            </option>\\r\\n          </select>\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">Assignment Title * <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickedassign.valid && pickedassign.touched\\\"><small>\\r\\n                Required</small> </span></label>\\r\\n                    <input type=\\\"text\\\" required style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"title\\\" placeholder=\\\"Assignment Title\\\" [(ngModel)]=\\\"title\\\" #pickedassign=\\\"ngModel\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">Due Date * <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickeddueDate.valid && pickeddueDate.touched\\\"><small>\\r\\n                Due Date Required</small> </span></label>\\r\\n                    <input type=\\\"date\\\" required style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"dueDate\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"dueDate\\\" #pickeddueDate=\\\"ngModel\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">Total Marks * <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickedTM.valid && pickedTM.touched\\\"><small>\\r\\n                Marks Required</small> </span></label>\\r\\n                    <input type=\\\"number\\\" required style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"tMarks\\\" placeholder=\\\"Total Marks\\\" [(ngModel)]=\\\"tMarks\\\" #pickedTM=\\\"ngModel\\\">\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\"> Assignment Images <span style=\\\"color:red;\\\">\\r\\n            </span></label>\\r\\n                    <input id=\\\"assignment_image\\\" #imageFile accept=\\\"image/*\\\" name=\\\"assignment_image\\\" type=\\\"file\\\" (change)=\\\"fileChangeEvent($event)\\\" class=\\\"form-control fm-control\\\" placeholder=\\\"Upload a file...\\\" multiple />\\r\\n                </div>\\r\\n\\r\\n\\r\\n            </div>\\r\\n\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"modal-footer\\\">\\r\\n            <input type=\\\"submit\\\" class=\\\"btn btn-info\\\" [disabled]=\\\"!addAssignment.form.valid || disableBtn\\\" value=\\\"Add Assignment\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"modal.close('Close click')\\\">Close</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</ng-template>\\r\\n\\r\\n\\r\\n\\r\\n<!-- ******** Update Assignment marks ************ -->\\r\\n\\r\\n\\r\\n<ng-template #updateAssignMarksModel let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Update Assignment Marks </h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <table class=\\\"table table-bordered table-hover\\\">\\r\\n            <thead class=\\\"thead-light\\\">\\r\\n                <tr>\\r\\n\\r\\n                    <th>Roll Num</th>\\r\\n                    <th>Name </th>\\r\\n                    <th>Total Marks</th>\\r\\n                    <!-- <th>Obtained Marks</th> -->\\r\\n                    <th>Obtained Marks</th>\\r\\n                    <!-- <th>Comment</th> -->\\r\\n                    <!-- <th>Submitted Date</th> -->\\r\\n                    <!-- <th *ngIf=\\\"(selectedexamType == 'exam')\\\">Update Marks</th> -->\\r\\n                    <!-- <th>Update Marks</th> -->\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n\\r\\n                <tr *ngFor=\\\"let item of std_assignmentDetails | paginate: { id: 'pager', itemsPerPage: pageSize, currentPage: pageNumber};let index = index\\\">\\r\\n\\r\\n\\r\\n                    <td>{{item.roll_num}}</td>\\r\\n                    <td>{{item.std_name}}</td>\\r\\n                    <td>{{ item.assign_tMarks}}</td>\\r\\n\\r\\n                    <!-- <td>{{item.obtained_marks == \\\"\\\" ? 0 :item.obtained_marks }}</td> -->\\r\\n\\r\\n                    <td><input type=\\\"number\\\" name=\\\"obt_marks\\\" #obtAssignMarks [(ngModel)]=\\\"item.obtained_marks\\\" (change)=\\\"addStdAssignMarks(item.assign_id,item.std_id,obtAssignMarks.value , item.assign_tMarks)\\\"></td>\\r\\n                    <!-- <td><input type=\\\"text\\\" #obtComment [(ngModel)]=\\\"item.comments\\\"></td> -->\\r\\n                    <!-- <td><input type=\\\"date\\\" #submitDate [(ngModel)]=\\\"item.assign_submit_date\\\"></td> -->\\r\\n\\r\\n                    <!-- <td> <label style=\\\"cursor: pointer;\\\" (click)=\\\"addStdAssignMarks(item.assign_id,item.std_id,obtAssignMarks.value , item.assign_tMarks)\\\" class=\\\"badge badge-info\\\">Update </label></td> -->\\r\\n\\r\\n                </tr>\\r\\n\\r\\n            </tbody>\\r\\n        </table>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"modal.close('Close click')\\\">Close</button>\\r\\n    </div>\\r\\n</ng-template>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- ******** Upload assignments  ************ -->\\r\\n\\r\\n\\r\\n\\r\\n<ng-template #uploadAssignModal let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Update Assignment Marks </h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <input id=\\\"cin\\\" name=\\\"cin\\\" type=\\\"file\\\" (change)=\\\"fileChangeEvent($event)\\\" placeholder=\\\"Upload a file...\\\" multiple />\\r\\n\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-success btn-s\\\" (click)=\\\"upload()\\\">\\r\\n      <i class=\\\"glyphicon glyphicon-open-file\\\"></i>&nbsp;Upload\\r\\n    </button>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"modal.close('Close click')\\\">Close</button>\\r\\n    </div>\\r\\n</ng-template>\"","module.exports = \"\"","import { Component, OnInit, ElementRef } from '@angular/core';\r\nimport { SectionDataService } from '../sections/manageSection.service';\r\nimport { ClassDataService } from '../classes/manageClass.service';\r\nimport { SubjectsDataService } from '../subjects/manage-subjects.service';\r\nimport { AssignmentsService } from './assignments.service';\r\nimport { CommonService } from '../shared/services/common.service';\r\nimport { ViewChild } from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport swal from 'sweetalert2';\r\n@Component({\r\n  selector: 'app-assignments',\r\n  templateUrl: './assignments.component.html',\r\n  styleUrls: ['./assignments.component.scss'],\r\n  providers: [\r\n    ClassDataService,\r\n    SectionDataService,\r\n    SubjectsDataService,\r\n    AssignmentsService,\r\n    CommonService\r\n  ]\r\n})\r\nexport class AssignmentsComponent implements OnInit {\r\n  // reset image filed after submit\r\n  @ViewChild('imageFile')\r\n  myInputVariable: ElementRef;\r\n\r\n  public pageSize = 10;\r\n  public pageNumber = 1;\r\n  /* active session */\r\n  public running_session = localStorage.getItem('running_session');\r\n\r\n  // Arrays\r\n  public classdataList: Array<any>;\r\n  public sectionsList: Array<any>;\r\n  public filesToUpload: Array<File> = [];\r\n\r\n  public cSubjectsList: Array<any>;\r\n  public assignments_Data: Array<any>;\r\n\r\n  public std_assignmentDetails: Array<any>;\r\n\r\n  // add assignments variables\r\n\r\n  public classid: number;\r\n  public sectionid: number;\r\n  public subjectid: number;\r\n  public title = '';\r\n  public dueDate = '';\r\n  public tMarks: number;\r\n  public assignment_image;\r\n\r\n  // update marks\r\n\r\n  selected_class_id: number;\r\n  selected_section_id: number;\r\n\r\n  g_subject_id: number;\r\n  g_section_id: number;\r\n  g_class_id: number;\r\n  studentAvailable;\r\n  manageMArksStatus;\r\n  studentAvailabel;\r\n  studentAvailabe;\r\n\r\n  selected_subject: any;\r\n  selected_subj_type: any;\r\n\r\n  // notifications\r\n  public showHeading = false;\r\n  public disableBtn = true;\r\n  public selectedClass: number;\r\n\r\n  public selectedSubject: any;\r\n\r\n  public selectedClassName: string;\r\n  public selectedClsSection: string;\r\n\r\n  imgValidation = true;\r\n  uploadImage = false;\r\n\r\n  public upload;\r\n  // create instance of services to access method from services\r\n  constructor(\r\n    private _commonService: CommonService,\r\n    private _classDataService: ClassDataService,\r\n    private _sectionDataService: SectionDataService,\r\n    private _subjectsDataService: SubjectsDataService,\r\n    private _assignmentsService: AssignmentsService,\r\n    private modalService: NgbModal\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getClassData(); // get class data\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Read Data from DB Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Get all Classes data ************************/\r\n  // ******************************************************************* */\r\n\r\n  public getClassData() {\r\n    this._classDataService.getClassesF().subscribe(result => {\r\n      this.classdataList = result;\r\n    });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // ************ Get Section Data Against Selected Class ***************** */\r\n  // ********************************************************************* */\r\n\r\n  public getSectionByClassID(class_id: number) {\r\n    this.selectedClass = class_id;\r\n    // * disbale btn untill section selcted and empty section array when selected class change\r\n    this.sectionsList = [];\r\n    this.cSubjectsList = [];\r\n\r\n    this.disableBtn = true;\r\n\r\n    this._sectionDataService.getSectionF(class_id).subscribe(result => {\r\n      this.sectionsList = result;\r\n    });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // **** Get Elective And Core Subject Data by Class ID section ID ******* */\r\n  // ********************************************************************* */\r\n\r\n  public getSubjectByClassSecId(class_id, section_id, subjects_type) {\r\n    this.cSubjectsList = [];\r\n    this.disableBtn = true;\r\n    // *** get Core subjects\r\n    const type = 'all';\r\n    this._subjectsDataService\r\n      .getSubjectByClassSecIdF(class_id, section_id, this.running_session)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this.cSubjectsList = result.data;\r\n          this.selectedClassName = result.data[0].class_name;\r\n          this.selectedClsSection = result.data[0].section_name;\r\n        }\r\n        if (result.status === 0) {\r\n          this._commonService.warningToaster(\r\n            'No subject is added against class',\r\n            '!'\r\n          );\r\n        }\r\n\r\n        if (result.status === 403) {\r\n          console.log(result.msg);\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // ************************* Get Assignment details ********************** */\r\n  // ********************************************************************* */\r\n\r\n  public getAssignments(submitEvent) {\r\n    this.showHeading = true;\r\n    const subject_id_type = submitEvent.value.g_subject_id.split('-');\r\n    const subject_id = subject_id_type[0];\r\n    const subject_type = subject_id_type[1];\r\n\r\n    this.selected_subject = subject_id;\r\n    this.selected_subj_type = subject_type;\r\n\r\n    this.selected_class_id = submitEvent.value.g_class_id;\r\n    this.selected_section_id = submitEvent.value.g_section_id;\r\n\r\n    const assignemnt_data = {\r\n      class_id: submitEvent.value.g_class_id,\r\n      section_id: submitEvent.value.g_section_id,\r\n      subject_id: subject_id,\r\n      running_session: this.running_session\r\n    };\r\n\r\n    this._assignmentsService\r\n      .get_assignmentsF(assignemnt_data)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this.assignments_Data = result.data;\r\n        }\r\n        if (result.status === 0) {\r\n          this._commonService.warningToaster(\r\n            'No assignment is added against class',\r\n            '!'\r\n          );\r\n        }\r\n\r\n        if (result.status === 403) {\r\n          this._commonService.warningToaster(\r\n            'Server error try again',\r\n            'Error!'\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // ************* Get students for update assignment marks ************** */\r\n  // ********************************************************************* */\r\n\r\n  public getStudentAssignDetails(assign_id) {\r\n    const data = {\r\n      class_id: this.selected_class_id,\r\n      section_id: this.selected_section_id,\r\n      subject_id: this.selected_subject,\r\n      subject_type: this.selected_subj_type,\r\n      running_session: this.running_session,\r\n      assign_id: assign_id\r\n    };\r\n\r\n    this._assignmentsService\r\n      .get_students_assign_details(data)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this.std_assignmentDetails = result.data;\r\n\r\n        } else {\r\n          console.log(result);\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // ************************* Update Assignment Marks Modal ************** */\r\n  // ********************************************************************* */\r\n\r\n  public updateAssignmentModal(modal, assign_id, assign_tMarks, index) {\r\n    this.getStudentAssignDetails(assign_id);\r\n    this.openModal(modal);\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Add Update  Data  Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ********************************************************** **********/\r\n  // ***************************** Assignments *************************/\r\n  // ******************************************************************* */\r\n\r\n  public onClickAddAssignment(submitEvent) {\r\n    // get assignment image data\r\n    const imagesData: any = new FormData();\r\n    const files: Array<File> = this.filesToUpload;\r\n    if (files.length >= 1) {\r\n      this.uploadImage = true;\r\n    }\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      imagesData.append('uploads[]', files[i], files[i]['name']);\r\n    }\r\n\r\n    // assignment data\r\n    const eventHandler = submitEvent.value;\r\n\r\n    // get current date\r\n    const d = new Date();\r\n    const month = d.getMonth() + 1;\r\n    const day = d.getDate();\r\n    const current_date =\r\n      d.getFullYear() +\r\n      '-' +\r\n      (('' + month).length < 2 ? '0' : '') +\r\n      month +\r\n      '-' +\r\n      (('' + day).length < 2 ? '0' : '') +\r\n      day;\r\n\r\n    // ** convert selected time to Unix timestamp\r\n\r\n    const unix_today_date = new Date(current_date).getTime() / 1000;\r\n\r\n    const assign_duedate = new Date(eventHandler.dueDate).getTime() / 1000;\r\n\r\n    const add_assignment_data = {\r\n      class_id: eventHandler.classid,\r\n      section_id: eventHandler.sectionid,\r\n      subject_id: eventHandler.subjectid,\r\n      title: eventHandler.title,\r\n      type: 'assignment',\r\n      assign_created_date: unix_today_date,\r\n      assign_due_date: assign_duedate,\r\n      assign_tMarks: eventHandler.tMarks,\r\n      year: this.running_session\r\n    };\r\n\r\n    this._assignmentsService\r\n      .add_newAssignmentF(add_assignment_data)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          // data store in tbl_images with asignment images\r\n          if (this.uploadImage === true) {\r\n            const id = JSON.stringify(result.inserted_id);\r\n            imagesData.append('source_id', id); // assignment id\r\n            imagesData.append('source_type', 'assignment');\r\n\r\n            // this.myInputVariable.nativeElement.value = \"\";\r\n\r\n            // add assignment images\r\n\r\n            this._assignmentsService\r\n              .add_assignment_images(imagesData)\r\n              .subscribe(resultresp => {\r\n                this.filesToUpload = [];\r\n              });\r\n          }\r\n\r\n          this._commonService.successToaster('Added Successfully', 'Success!');\r\n          this.closeModal();\r\n\r\n          submitEvent.reset();\r\n        } else {\r\n          this._commonService.errorToaster('Server error try again', 'Error!');\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // ******************* Add Student Assignments Marks********************/\r\n  // ******************************************************************* */\r\n\r\n  addStdAssignMarks(\r\n    assign_id,\r\n    std_id,\r\n    obtained_marks,\r\n    selected_assg_t_marks\r\n\r\n  ) {\r\n\r\n\r\n    if (obtained_marks > selected_assg_t_marks) {\r\n\r\n      swal('Failed', 'Obtained marks must be less than Total marks  : ' + selected_assg_t_marks , 'warning');\r\n      return false;\r\n    } else {\r\n\r\n      // get current date\r\n    const d = new Date();\r\n    const month = d.getMonth() + 1;\r\n    const day = d.getDate();\r\n    const current_date =\r\n      d.getFullYear() +\r\n      '-' +\r\n      (('' + month).length < 2 ? '0' : '') +\r\n      month +\r\n      '-' +\r\n      (('' + day).length < 2 ? '0' : '') +\r\n      day;\r\n\r\n    // ** convert selected time to Unix timestamp\r\n\r\n    const unix_today_date = this._commonService.get_current_unix_timestamp();\r\n\r\n    if (obtained_marks === '') {\r\n      this._commonService.warningToaster('Obtained marks required', 'Failed!');\r\n    } else {\r\n      const std_assign_data = {\r\n        student_id: std_id,\r\n        obtained_marks: obtained_marks,\r\n        marked: 1,\r\n        assign_submit_date: unix_today_date,\r\n        comments: '',\r\n        assign_id: assign_id\r\n      };\r\n\r\n      this._assignmentsService\r\n        .update_Assignment_marks(std_assign_data)\r\n        .subscribe(result => {\r\n          if (result.status === 1) {\r\n            this._commonService.successToaster(\r\n              'Updated Successfully',\r\n              'Success!'\r\n            );\r\n            // this.closeModal();\r\n          } else {\r\n            this._commonService.errorToaster(\r\n              'Server error try again',\r\n              'Failed!'\r\n            );\r\n          }\r\n        });\r\n    }\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  // ************************************************************************************************************* */\r\n  /*********************************************Store Assignment Images in Array******************************** */\r\n  // ************************************************************************************************************* */\r\n  public fileChangeEvent(fileInput: any) {\r\n    this.filesToUpload = <Array<File>>fileInput.target.files;\r\n\r\n    // this.product.photo = fileInput.target.files[0]['name'];\r\n\r\n    // //check file is valid\r\n    // if (!this._commonService.validateFile(filedata[0].name)) {\r\n\r\n    //     this.imgValidation = false ;\r\n    //     this.uploadImage = false;\r\n    // }else{\r\n\r\n    //    this.filesToUpload = filedata;\r\n    //    this.imgValidation = true;\r\n    // }\r\n  }\r\n\r\n  // ************************************************************************************************************* */\r\n  /*********************************************General   Methods************************************************ */\r\n  // ************************************************************************************************************* */\r\n\r\n  // new modal\r\n  openNgModal(content, size) {\r\n    this.modalService.open(content, { size: size });\r\n  }\r\n\r\n  // *** Selected section class id to get subjects */\r\n\r\n  public sectionSelectedF(section_id) {\r\n    const subject_type = 'c';\r\n    this.getSubjectByClassSecId(this.selectedClass, section_id, subject_type);\r\n  }\r\n\r\n  // *** get sections against class for dropdown\r\n  public classSelected(class_id) {\r\n    this.getSectionByClassID(class_id);\r\n  }\r\n\r\n  // get selected subject id\r\n  public funSelectedSub(subject_id) {\r\n    this.selectedSubject = '';\r\n    this.selectedSubject = subject_id;\r\n    this.enableBtn();\r\n  }\r\n\r\n  /********************************* pagination Info ****************************/\r\n\r\n  public pageChanged(pN: number): void {\r\n    this.pageNumber = pN;\r\n  }\r\n\r\n  // enable manage assignment btn when section isnt empty\r\n  public enableBtn() {\r\n    this.disableBtn = false;\r\n  }\r\n\r\n  // open modal\r\n  public openModal(modal) {\r\n    this.openNgModal(modal, 'md');\r\n  }\r\n\r\n  // close modal\r\n  public closeModal() {\r\n    this.modalService.dismissAll();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { routing } from './assignments.routing';\r\nimport { HttpModule } from '@angular/http';\r\n\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\nimport { SelectModule } from 'ng2-select';\r\nimport { ModalModule } from 'ngx-modal';\r\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\r\nimport { FileUploadModule } from 'ng2-file-upload';\r\n\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n/* components */\r\nimport { AssignmentsComponent } from './assignments.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    Ng2SearchPipeModule,\r\n    NgxPaginationModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FileUploadModule,\r\n    SelectModule,\r\n    ModalModule,\r\n    HttpModule,\r\n    routing\r\n  ],\r\n  declarations: [AssignmentsComponent]\r\n})\r\nexport class AssignmentsModule {}\r\n","import { Routes, RouterModule } from \"@angular/router\";\r\nimport { AssignmentsComponent } from \"./assignments.component\";\r\n\r\nconst childRoutes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: AssignmentsComponent\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(childRoutes);\r\n","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport { GlobalService } from '../shared/services/global.service';\r\n\r\n@Injectable()\r\nexport class AssignmentsService {\r\n  constructor(private http: Http, private _globalService: GlobalService) {}\r\n\r\n  public serverLink = this._globalService.constants.serverLink;\r\n  public headers = new Headers(this._globalService.constants.headers);\r\n  // *********************** Call  API to add new assignment *****************************\r\n\r\n  add_newAssignmentF(new_assignment_data) {\r\n    return this.http\r\n      .post(this.serverLink + 'add/new_assignment', new_assignment_data, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Call  API to get assignmen details *****************************\r\n\r\n  get_assignmentsF(assignemnt_data) {\r\n    return this.http\r\n      .post(this.serverLink + 'get_assignment_details', assignemnt_data, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  upload_images(formData) {\r\n    return this.http\r\n      .post(this.serverLink + 'photos/upload', formData, {\r\n        headers: this.headers\r\n      })\r\n      .map(files => files.json());\r\n  }\r\n\r\n  // *********************** getting student and assignment mark details *****************************\r\n\r\n  get_students_assign_details(data) {\r\n    return this.http\r\n      .post(this.serverLink + 'get/student/assign_details', data, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Update student assignment marks *****************************\r\n  update_Assignment_marks(data) {\r\n    return this.http\r\n      .post(this.serverLink + 'update/std_assignment_marks', data, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** upload assignment details *****************************\r\n\r\n  add_assignment_images(image_data) {\r\n    return this.http\r\n      .post(this.serverLink + 'upload/assignment', image_data, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n}\r\n"],"sourceRoot":""}