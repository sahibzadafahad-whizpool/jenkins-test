{"version":3,"sources":["webpack:///./src/app/attendance/daily-attendance.service.ts","webpack:///./src/app/students/student-information.service.ts"],"names":[],"mappings":"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","file":"default~attendance-attendance-module~attendance-report-attendance-report-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport { GlobalService } from '../shared/services/global.service';\r\n@Injectable()\r\nexport class DailyAttendanceService {\r\n  constructor(private http: Http, private _globalService: GlobalService) {}\r\n\r\n  public serverLink = this._globalService.constants.serverLink;\r\n  public headers = new Headers(this._globalService.constants.headers);\r\n\r\n  // *********************** Call  API for Marking Attendance *****************************\r\n\r\n  markAttendanceF(dailyAttendance) {\r\n    return this.http\r\n      .post(this.serverLink + 'mark/attendance', dailyAttendance, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // ********************* Call  API to get students for mark attendace **********************\r\n\r\n  getstdForMrkAttendance(class_id, section_id, running_session, timestamp) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          'get/stdForMrkAttendance/' +\r\n          class_id +\r\n          '/' +\r\n          section_id +\r\n          '/' +\r\n          running_session +\r\n          '/' +\r\n          timestamp,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // ********************* Call  API to mark attendance in bulk **********************\r\n  mark_Bulk_attendance(bulk_attendance) {\r\n    return this.http\r\n      .post(this.serverLink + 'mark/bulk_attendance', bulk_attendance, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // ********************* Call API to add absent reason **********************\r\n  add_absent_reason(data) {\r\n    return this.http\r\n      .post(this.serverLink + 'update/absent_reason', data, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\nimport { GlobalService } from '../shared/services/global.service';\r\n\r\n@Injectable()\r\nexport class StudentsInfoService {\r\n  constructor(private http: Http, private _globalService: GlobalService) {}\r\n\r\n  public serverLink = this._globalService.constants.serverLink;\r\n  public imagesBaseServer = this._globalService.constants.imagesBaseServer;\r\n  public headers = new Headers(this._globalService.constants.headers);\r\n\r\n  // *************** Call API to get Students data against class *****************\r\n\r\n  getStudByClassId(class_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink + 'get/students/' + class_id + '/' + running_session,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to get Students Result info *****************\r\n  get_stdResultF(exam_id, student_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          'get/std_result/' +\r\n          exam_id +\r\n          '/' +\r\n          student_id +\r\n          '/' +\r\n          running_session,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to get Students All exam Result info *****************\r\n  get_stdAllexamResultF(student_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          'get/std_result/' +\r\n          student_id +\r\n          '/' +\r\n          running_session,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to get required Students data against class and section *****************\r\n\r\n  getStudDataByClassSecId(class_id, section_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          'get/getStudDataByClassSecId/' +\r\n          class_id +\r\n          '/' +\r\n          section_id +\r\n          '/' +\r\n          running_session,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to get Students  data against class and section *****************\r\n\r\n  // ** @param data_required -> get student all data or only required data */\r\n\r\n  getStudByClassSecId(class_id, section_id, running_session, data_required) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          'get/studentsByClassSecId/' +\r\n          class_id +\r\n          '/' +\r\n          section_id +\r\n          '/' +\r\n          running_session +\r\n          '/' +\r\n          data_required,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to get Signle Students data for update *****************\r\n\r\n  getSingleStdInfo(class_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          'get/singleStudent/' +\r\n          class_id +\r\n          '/' +\r\n          running_session,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to update student personal info *****************\r\n\r\n  updateStdInfo(std_id, updateStdData) {\r\n    return this.http\r\n      .put(this.serverLink + 'update/studentInfo/' + std_id, updateStdData, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to update student educational info *****************\r\n\r\n  updateStdEnrollInfo(std_id, updateEnrollInfo) {\r\n    return this.http\r\n      .put(\r\n        this.serverLink + 'update/studentEduInfo/' + std_id,\r\n        updateEnrollInfo,\r\n        { headers: this.headers }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to Delete student  *****************\r\n\r\n  deleteStudent(std_id) {\r\n    return this.http\r\n      .put(this.serverLink + 'delete/student/' + std_id, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Call  API for verifing parent phone number *****************************\r\n\r\n  verifyParentF(parentNumber) {\r\n    return this.http\r\n      .post(this.serverLink + 'verify/parent', parentNumber, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Call  API for Adding New Student *****************************\r\n\r\n  addStudentF(newSubjectData) {\r\n    return this.http\r\n      .post(this.serverLink + 'add/student', newSubjectData, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Call  API for Adding New Student *****************************\r\n\r\n  enrollStudentF(enrollStudentData) {\r\n    return this.http\r\n      .post(this.serverLink + 'enroll/student', enrollStudentData, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n}\r\n"],"sourceRoot":""}