{"version":3,"sources":["webpack:///./node_modules/ng2-search-filter/ng2-search-filter.es5.js","webpack:///./src/app/classes/manageClass.service.ts","webpack:///./src/app/sections/manageSection.service.ts","webpack:///./src/app/students/student-information.service.ts"],"names":[],"mappings":"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","file":"default~attendance-attendance-module~attendance-report-attendance-report-module~exams-exams-module~m~f33225f2.js","sourcesContent":["import { Injectable, NgModule, Pipe } from '@angular/core';\nvar Ng2SearchPipe = /** @class */ (function () {\n    function Ng2SearchPipe() {\n    }\n    /**\n     * @param {?} items object from array\n     * @param {?} term term's search\n     * @return {?}\n     */\n    Ng2SearchPipe.prototype.transform = function (items, term) {\n        if (!term || !items)\n            return items;\n        return Ng2SearchPipe.filter(items, term);\n    };\n    /**\n     *\n     * @param {?} items List of items to filter\n     * @param {?} term  a string term to compare with every property of the list\n     *\n     * @return {?}\n     */\n    Ng2SearchPipe.filter = function (items, term) {\n        var /** @type {?} */ toCompare = term.toLowerCase();\n        return items.filter(function (item) {\n            for (var /** @type {?} */ property in item) {\n                if (item[property] === null) {\n                    continue;\n                }\n                if (item[property].toString().toLowerCase().includes(toCompare)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    };\n    return Ng2SearchPipe;\n}());\nNg2SearchPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'filter',\n                pure: false\n            },] },\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nNg2SearchPipe.ctorParameters = function () { return []; };\nvar Ng2SearchPipeModule = /** @class */ (function () {\n    function Ng2SearchPipeModule() {\n    }\n    return Ng2SearchPipeModule;\n}());\nNg2SearchPipeModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [Ng2SearchPipe],\n                exports: [Ng2SearchPipe]\n            },] },\n];\n/**\n * @nocollapse\n */\nNg2SearchPipeModule.ctorParameters = function () { return []; };\n/**\n * Generated bundle index. Do not edit.\n */\nexport { Ng2SearchPipeModule, Ng2SearchPipe };\n//# sourceMappingURL=ng2-search-filter.es5.js.map\n","//******************** Node APIs path  MainProject/Routes/route.js *********************** */\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Http, Headers } from \"@angular/http\";\r\nimport \"rxjs/add/operator/map\";\r\nimport { GlobalService } from \"./../shared/services/global.service\";\r\n\r\n@Injectable()\r\nexport class ClassDataService {\r\n  public headers = new Headers();\r\n\r\n  constructor(private http: Http, private _globalService: GlobalService) {\r\n    this.headers.append(\"Content-type\", \"application/json\");\r\n  }\r\n\r\n  public serverLink = this._globalService.constants.serverLink;\r\n\r\n  //*********************** Call API for retreiewing Class Data ********************\r\n\r\n  getClassesF() {\r\n    return this.http\r\n      .get(this.serverLink + \"get/classes\")\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*********************** Call API for retreiewing single Class Data By ID********************\r\n\r\n  getSingleClassByIdF(id) {\r\n    return this.http\r\n      .get(this.serverLink + \"get/classById/\" + id)\r\n      .map(res => res.json());\r\n  }\r\n\r\n  //********************* Call API to check whether class already added ******************* */\r\n\r\n  classExistCheckF(c_name) {\r\n    return this.http\r\n      .get(this.serverLink + \"get/classByName/\" + c_name)\r\n      .map(res => res.json());\r\n  }\r\n\r\n  //*********************** Call  API for Adding New Class Data *****************************\r\n\r\n  addClassF(classDetails) {\r\n    return this.http\r\n      .post(this.serverLink + \"add/class\", classDetails, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*********************** Call  API for Updating Class Data *****************************\r\n\r\n  updateClassF(classUpdateDetails, id) {\r\n    return this.http\r\n      .put(this.serverLink + \"update/class/\" + id, classUpdateDetails, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*********************** Call  API for Deleting Teachers Data *****************************\r\n\r\n  deleteClassF(deleteStatus, id) {\r\n    return this.http\r\n      .put(this.serverLink + \"delete/class/\" + id, deleteStatus, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n}\r\n","// ******************** Node APIs path  MainProject/Routes/route.js *********************** */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport { GlobalService } from './../shared/services/global.service';\r\n\r\n@Injectable()\r\nexport class SectionDataService {\r\n  public headers = new Headers();\r\n\r\n  constructor(private http: Http, private _globalService: GlobalService) {\r\n    this.headers.append('Content-type', 'application/json');\r\n  }\r\n\r\n  public serverLink = this._globalService.constants.serverLink;\r\n\r\n  // ********* Call API to get section data against class id *****************\r\n\r\n  getOnlySectionDataF(class_id) {\r\n    return this.http\r\n      .get(this.serverLink + 'get/sectionData/' + class_id)\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // ********* Call API to get section related all data (section , class, teachers info) against class id *****************\r\n\r\n  getSectionF(class_id) {\r\n    return this.http\r\n      .get(this.serverLink + 'get/sectionRelatedData/' + class_id)\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to get single section data against class *****************\r\n\r\n  getSingleSectionF(section_id, class_id) {\r\n    return this.http\r\n      .get(this.serverLink + 'get/singleSection/' + section_id + '/' + class_id)\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // ********************* Call API for add Section Data ***********************\r\n\r\n  addSectionF(sectionDetails) {\r\n    return this.http\r\n      .post(this.serverLink + 'add/section', sectionDetails, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Call API for Delete Section Data ********************\r\n\r\n  delSectionF(clas_id, section_id, deleteStatus) {\r\n    return this.http\r\n      .put(\r\n        this.serverLink + 'delete/section/' + clas_id + '/' + section_id,\r\n        deleteStatus,\r\n        { headers: this.headers }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Call API for Delete Section Data By class ID ********************\r\n\r\n  delSectionByClassIdF(deleteStatus, id) {\r\n    return this.http\r\n      .put(this.serverLink + 'delete/sectionByClassId/' + id, deleteStatus, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *************** Call API to check whether Section already added against selected class ************* */\r\n\r\n  sectionExistCheckF(class_id, section_name) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink + 'check/sectionExists/' + class_id + '/' + section_name\r\n      )\r\n      .map(res => res.json());\r\n  }\r\n\r\n  // *********************** Call API for Updating Section Data  ********************\r\n\r\n  updateSectionF(updateSectionData, clas_id, section_id) {\r\n    return this.http\r\n      .put(\r\n        this.serverLink + 'update/section/' + clas_id + '/' + section_id,\r\n        updateSectionData,\r\n        { headers: this.headers }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Http, Headers } from \"@angular/http\";\r\nimport \"rxjs/add/operator/map\";\r\n\r\nimport { GlobalService } from \"../shared/services/global.service\";\r\n\r\n@Injectable()\r\nexport class StudentsInfoService {\r\n  public headers = new Headers();\r\n\r\n  constructor(private http: Http, private _globalService: GlobalService) {\r\n    this.headers.append(\"Content-type\", \"application/json\");\r\n  }\r\n\r\n  public serverLink = this._globalService.constants.serverLink;\r\n\r\n  //*************** Call API to get Students data against class *****************\r\n\r\n  getStudByClassId(class_id, running_session) {\r\n    return this.http\r\n      .get(this.serverLink + \"get/students/\" + class_id + \"/\" + running_session)\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*************** Call API to get Students Result info *****************\r\n  get_stdResultF(exam_id, student_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          \"get/std_result/\" +\r\n          exam_id +\r\n          \"/\" +\r\n          student_id +\r\n          \"/\" +\r\n          running_session\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*************** Call API to get Students All exam Result info *****************\r\n  get_stdAllexamResultF(student_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink + \"get/std_result/\" + student_id + \"/\" + running_session\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*************** Call API to get required Students data against class and section *****************\r\n\r\n  getStudDataByClassSecId(class_id, section_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          \"get/getStudDataByClassSecId/\" +\r\n          class_id +\r\n          \"/\" +\r\n          section_id +\r\n          \"/\" +\r\n          running_session\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*************** Call API to get Students  data against class and section *****************\r\n\r\n  //** @param data_required -> get student all data or only required data */\r\n\r\n  getStudByClassSecId(class_id, section_id, running_session, data_required) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          \"get/studentsByClassSecId/\" +\r\n          class_id +\r\n          \"/\" +\r\n          section_id +\r\n          \"/\" +\r\n          running_session +\r\n          \"/\" +\r\n          data_required\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*************** Call API to get Signle Students data for update *****************\r\n\r\n  getSingleStdInfo(class_id, running_session) {\r\n    return this.http\r\n      .get(\r\n        this.serverLink +\r\n          \"get/singleStudent/\" +\r\n          class_id +\r\n          \"/\" +\r\n          running_session\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*************** Call API to update student personal info *****************\r\n\r\n  updateStdInfo(std_id, updateStdData) {\r\n    return this.http\r\n      .put(this.serverLink + \"update/studentInfo/\" + std_id, updateStdData, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*************** Call API to update student educational info *****************\r\n\r\n  updateStdEnrollInfo(std_id, updateEnrollInfo) {\r\n    return this.http\r\n      .put(\r\n        this.serverLink + \"update/studentEduInfo/\" + std_id,\r\n        updateEnrollInfo,\r\n        { headers: this.headers }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*************** Call API to Delete student  *****************\r\n\r\n  deleteStudent(std_id, userAuth) {\r\n    return this.http\r\n      .put(this.serverLink + \"delete/student/\" + std_id, userAuth, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*********************** Call  API for verifing parent phone number *****************************\r\n\r\n  verifyParentF(parentNumber) {\r\n    return this.http\r\n      .post(this.serverLink + \"verify/parent\", parentNumber, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*********************** Call  API for Adding New Student *****************************\r\n\r\n  addStudentF(newSubjectData) {\r\n    return this.http\r\n      .post(this.serverLink + \"add/student\", newSubjectData, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  //*********************** Call  API for Adding New Student *****************************\r\n\r\n  enrollStudentF(enrollStudentData) {\r\n    return this.http\r\n      .post(this.serverLink + \"enroll/student\", enrollStudentData, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n}\r\n"],"sourceRoot":""}