{"version":3,"sources":["webpack:///./src/app/attendance/attendance.component.html","webpack:///./src/app/attendance/attendance.component.scss","webpack:///./src/app/attendance/attendance.component.ts","webpack:///./src/app/attendance/attendance.module.ts","webpack:///./src/app/attendance/attendance.routing.ts"],"names":[],"mappings":"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","file":"attendance-attendance-module.js","sourcesContent":["module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-12 \\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">Manage Daily Attendance</h4>\\r\\n                <form style=\\\"margin-top:2em;\\\" class=\\\"form-group\\\" #manageAttedance=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmitMngAtten(manageAttedance)\\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-4 form-group\\\">\\r\\n                            <label class=\\\"control-label\\\"> Class *</label>\\r\\n                            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedStdCLass.valid && pickedStdCLass.touched\\\"><small>Class\\r\\n                  Required</small></span>\\r\\n                            <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedStdCLass [(ngModel)]=\\\"std_classId\\\" (change)=classSelected(pickedStdCLass.value); name=\\\"std_classId\\\">\\r\\n                <option [ngValue]=\\\"undefined\\\" disabled>Select Class</option>\\r\\n                <option *ngFor=\\\"let item of classDataList\\\" [value]=\\\"item.class_id\\\">{{item.class_name}}</option>\\r\\n              </select>\\r\\n\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"col-md-4 form-group\\\">\\r\\n                            <label class=\\\"control-label\\\"> Section *</label>\\r\\n                            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedStdSection.valid && pickedStdSection.touched\\\"><small>Section\\r\\n                  Required</small></span>\\r\\n                            <select class=\\\"form-control fm-control\\\" style=\\\"margin-top:0em;\\\" #pickedStdSection [(ngModel)]=\\\"std_sectionId\\\" (change)=enableBtn() name=\\\"std_sectionId\\\">\\r\\n                <option [ngValue]=\\\"undefined\\\" disabled>Select Section</option>\\r\\n                <option *ngFor=\\\"let item of sectionsDataList\\\" [value]=\\\"item.section_id\\\">{{item.section_name}}</option>\\r\\n              </select>\\r\\n\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"col-md-4 form-group\\\">\\r\\n                            <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\"> Date * </label>\\r\\n                            <span style=\\\"color:red; margin-left: 1em;\\\" *ngIf=\\\"!pickedattendancedate.valid && pickedattendancedate.touched\\\"><small>Date\\r\\n                  for Attendance required</small></span>\\r\\n\\r\\n                            <input type=\\\"date\\\" style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"attendance_date\\\" required [(ngModel)]=\\\"attendance_date\\\" #pickedattendancedate=\\\"ngModel\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"col-md-12 form-group\\\" style=\\\"text-align: center\\\">\\r\\n                            <input type=\\\"submit\\\" class=\\\"btn btn-info\\\" style=\\\"margin-top:2em\\\" [disabled]=\\\"!manageAttedance.form.valid || disableBtn\\\" value=\\\"Manage Attendence\\\">\\r\\n\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-12 \\\" style=\\\"text-align: center\\\">\\r\\n                            <h5 style=\\\"color: red;\\\"> {{ studentAvailabe }}</h5>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\" *ngIf=\\\"showTable\\\">\\r\\n    <div class=\\\"col-lg-12 col-md-12\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n\\r\\n                <!-- <h4 class=\\\"card-title\\\">Assignments Information</h4> -->\\r\\n                <div class=\\\"mini-heading\\\" style=\\\"text-align: center ; margin-top :-2.5em ; margin-bottom:2em;\\\">\\r\\n                    <h3> Manage Attendance For</h3>\\r\\n                    <h4>\\r\\n                        Class : {{selectedClass}}\\r\\n                    </h4>\\r\\n                    <h4> Section : {{selectedSection}}\\r\\n                    </h4>\\r\\n                    <h4> Date : {{selectedDate}}</h4>\\r\\n                </div>\\r\\n                <hr>\\r\\n                <!-- <div style=\\\"height: 60px\\\">\\r\\n           <alert *ngIf=\\\"attendanceNotifiction\\\" type=\\\"success\\\">{{ markAttendRespMsg}}</alert>\\r\\n        </div> -->\\r\\n\\r\\n                <table class=\\\"table table-bordered table-hover\\\">\\r\\n                    <thead class=\\\"thead-light\\\">\\r\\n                        <tr>\\r\\n                            <th> S.No</th>\\r\\n                            <th>Roll Num</th>\\r\\n                            <th>Student Name</th>\\r\\n                            <!-- <th>Class </th>\\r\\n              <th>Section</th> -->\\r\\n\\r\\n                            <th>Attendance Status : {{selectedDate}}</th>\\r\\n                            <th><input type=\\\"checkbox\\\" [(ngModel)]=\\\"selectedAll\\\" (change)=\\\"selectAll();\\\" /> Select All</th>\\r\\n                            <!-- <th>Mark Individually</th> -->\\r\\n\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr *ngFor=\\\"let item of studentsDataList | paginate: { id: 'pager', itemsPerPage: pageSize, currentPage: pageNumber};let index = index\\\">\\r\\n\\r\\n                            <td>{{index + 1}}</td>\\r\\n                            <td>{{item.roll_num}}</td>\\r\\n                            <td>{{item.std_name}}</td>\\r\\n                            <!-- <td>{{item.class_name}}</td>\\r\\n\\r\\n\\r\\n              <td>{{item.section_name}}</td> -->\\r\\n\\r\\n                            <td [style.color]=\\\"item.attend_status == true ? 'green' : (item.attend_status == false ? 'red' : ( item.attend_status == 'P' ? 'green' : (  item.attend_status == 'A' ? 'red' : 'black' )))\\\">\\r\\n                                <strong>\\r\\n                  {{item.attend_status == true ? \\\"Marked Present\\\" : (item.attend_status == false ? \\\"Marked Absent\\\" : ( item.attend_status == \\\"P\\\" ? \\\"Marked Present\\\" : (  item.attend_status == \\\"A\\\" ? \\\"Marked Absent\\\" : \\\"Not Marked\\\" ) ))}}\\r\\n                </strong>\\r\\n                            </td>\\r\\n                            <td> <input type=\\\"checkbox\\\" [(ngModel)]=\\\"item.attend_status\\\" (change)=\\\"checkIfAllSelected();\\\">\\r\\n                            </td>\\r\\n\\r\\n\\r\\n                            <!-- <td>\\r\\n                <label *ngIf=\\\"item.attend_status == 'A' || item.attend_status == false || item.attend_status == null \\\"\\r\\n                  style=\\\"cursor: pointer;  margin-left: 1em; \\\" class=\\\"badge badge-primary\\\"\\r\\n                  (click)=\\\"markAttendance(item.class_id,item.section_id,item.std_id,'P')\\\">Present</label>\\r\\n\\r\\n                <label *ngIf=\\\"item.attend_status == 'A' || item.attend_status == false \\\"\\r\\n                  style=\\\"cursor: pointer; margin-left: 1em; \\\" class=\\\"badge badge-warning\\\"\\r\\n                  (click)=\\\"addLeave_Application(addLeaveReasonModel,item.std_name,item.attendance_id , item.comment)\\\">Update\\r\\n                  Leave\\r\\n                  Reason</label>\\r\\n\\r\\n                <label *ngIf=\\\"item.attend_status == 'P' || item.attend_status == true || item.attend_status == null \\\"\\r\\n                  style=\\\"cursor: pointer; margin-left: 1em;\\\" class=\\\"badge badge-danger\\\"\\r\\n                  (click)=\\\"markAttendance(item.class_id,item.section_id,item.std_id,'A')\\\">Absent</label>\\r\\n\\r\\n              </td> -->\\r\\n                        </tr>\\r\\n\\r\\n                    </tbody>\\r\\n                </table>\\r\\n\\r\\n                <div class=\\\"row\\\" style=\\\"margin-top: 2em;\\\">\\r\\n                    <div class=\\\"col-lg-12\\\" style=\\\"text-align: center\\\" *ngIf=\\\"mark_all_btn\\\">\\r\\n                        <label style=\\\"cursor: pointer; margin-left: 1em; font-size: 13px;\\\" class=\\\"badge badge-info\\\" (click)=\\\"MarkAll()\\\">Mark\\r\\n              Attendance\\r\\n              In Bulk</label>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- *********************************** Modals **************************************** -->\\r\\n\\r\\n\\r\\n\\r\\n<ng-template #addLeaveReasonModel let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Add Absent Reason</h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <form class=\\\"form-group\\\" #addStdLeave=\\\"ngForm\\\" (ngSubmit)=\\\"add_std_leaveReason(addStdLeave)\\\">\\r\\n            <label class=\\\"control-label\\\"> Student Name </label>\\r\\n\\r\\n            <input type=\\\"text\\\" readonly class=\\\"form-control fm-control\\\" name=\\\"c_student_name\\\" [(ngModel)]=\\\"c_student_name\\\" #pickedExpTitle=\\\"ngModel\\\">\\r\\n\\r\\n            <input type=\\\"hidden\\\" name=\\\"attendance_id\\\" [(ngModel)]=\\\"attendance_id\\\">\\r\\n\\r\\n\\r\\n            <label class=\\\"control-label\\\"> Absent Reason *</label>\\r\\n\\r\\n            <textarea rows=\\\"4\\\" cols=\\\"50\\\" required class=\\\"form-control fm-control\\\" name=\\\"absent_reason\\\" [(ngModel)]=\\\"absent_reason\\\" #pickedExpDesc=\\\"ngModel\\\"> </textarea>\\r\\n            <p class=\\\"alert alert-danger\\\" *ngIf=\\\"!pickedExpDesc.valid && pickedExpDesc.touched\\\" style=\\\"margin-top:1em; margin-left:0em;\\\">\\r\\n                Reason Required!\\r\\n            </p>\\r\\n\\r\\n\\r\\n            <div class=\\\"modal_button\\\" style=\\\"text-align:right\\\">\\r\\n                <input type=\\\"submit\\\" class=\\\"btn btn-info\\\" [disabled]=\\\"!addStdLeave.form.valid\\\" value=\\\"Add\\\" style=\\\"margin-top: 1em;\\\">\\r\\n            </div>\\r\\n\\r\\n        </form>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"modal.close('Close click')\\\">Close</button>\\r\\n    </div>\\r\\n</ng-template>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { StudentsInfoService } from '../students/student-information.service';\r\nimport { DailyAttendanceService } from './daily-attendance.service';\r\nimport { SectionDataService } from '../sections/manageSection.service';\r\nimport { ClassDataService } from '../classes/manageClass.service';\r\nimport { Router } from '@angular/router';\r\nimport swal from 'sweetalert2';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CommonService } from '../shared/services/common.service';\r\n\r\n@Component({\r\n  selector: 'app-attendance',\r\n  templateUrl: './attendance.component.html',\r\n  styleUrls: ['./attendance.component.scss'],\r\n  providers: [\r\n    StudentsInfoService,\r\n    ClassDataService,\r\n    SectionDataService,\r\n    DailyAttendanceService,\r\n    CommonService\r\n  ]\r\n})\r\nexport class AttendanceComponent implements OnInit {\r\n  tabtitle = 'Daily Attendance';\r\n  /* active session */\r\n  public running_session = localStorage.getItem('running_session');\r\n\r\n  /* pagination Info */\r\n  pageSize = 10;\r\n  pageNumber = 1;\r\n\r\n  // Arrays\r\n  classDataList: Array<any>;\r\n  sectionsDataList: Array<any>;\r\n  studentsDataList: Array<any>;\r\n\r\n  /* List student data variables */\r\n\r\n  class_id: number;\r\n  class_name: string;\r\n  enroll_id: number;\r\n  std_rollNum: number;\r\n  std_sectionId: string;\r\n  section_name: string;\r\n  status: number;\r\n  std_address: string;\r\n  std_dob: string;\r\n  std_email: string;\r\n  std_gender: string;\r\n  std_id: number;\r\n  std_name: string;\r\n  std_parentId: number;\r\n  std_password: string;\r\n  std_phonenum: number;\r\n  std_prevSchool: string;\r\n  std_username: string;\r\n  year: string;\r\n  std_classId: number;\r\n  attendance_date: string;\r\n  sectionId: number;\r\n  attend_status = 'Undefined';\r\n\r\n  selectedClass: string = null;\r\n  selectedSection: string = null;\r\n  selectedDate: string = null;\r\n\r\n  attendanceUnixTime: any;\r\n\r\n  // leave reason\r\n  c_student_name = '';\r\n  attendance_id: number;\r\n  absent_reason: string;\r\n\r\n  // notification\r\n\r\n  studentAvailabe = '';\r\n  disableBtn = true;\r\n  markAttendRespMsg: string;\r\n  attendanceNotifiction = 0;\r\n  showTable = false;\r\n\r\n  mark_all_btn = false;\r\n\r\n  loadData;\r\n\r\n  selectedAll: any;\r\n  selected_unix_date: any;\r\n\r\n  // create instance of services to access method from services\r\n  constructor(\r\n    private _StudentsInfoService: StudentsInfoService,\r\n    private _classDataService: ClassDataService,\r\n    private _sectionDataService: SectionDataService,\r\n    private _dailyAttendanceService: DailyAttendanceService,\r\n    private modalService: NgbModal,\r\n    private _commonService: CommonService\r\n  ) {}\r\n\r\n  // this function auto called when component loads\r\n  ngOnInit() {\r\n    this.getClassData();\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Read Data from DB Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Get all Classes data ************************/\r\n  // ******************************************************************* */\r\n\r\n  public getClassData() {\r\n    this._classDataService.getClassesF().subscribe(result => {\r\n      this.classDataList = result;\r\n    });\r\n  }\r\n\r\n  // ********************************************************************** */\r\n  // ************ Get Section Data Against Selected Class ***************** */\r\n  // ********************************************************************* */\r\n\r\n  public getSectionByClassID(class_id) {\r\n    // * disbale btn untill section selcted and empty section array when selected class change\r\n    this.sectionsDataList = [];\r\n    this.std_sectionId = null;\r\n    this.disableBtn = true;\r\n\r\n    this._sectionDataService.getSectionF(class_id).subscribe(result => {\r\n      this.sectionsDataList = result;\r\n    });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // ********* Get all Students details by class , Section ID ************/\r\n  // ******************************************************************* */\r\n\r\n  public getStudentsForMarkAttend(class_id, section_id) {\r\n    /* get all students and attendance report against selected class and Section  date*/\r\n    this._dailyAttendanceService\r\n      .getstdForMrkAttendance(\r\n        class_id,\r\n        section_id,\r\n\r\n        this.running_session,\r\n        this.attendanceUnixTime\r\n      )\r\n      .subscribe(result => {\r\n        this.studentsDataList = result.data;\r\n        console.log(this.studentsDataList);\r\n        if (this.studentsDataList.length) {\r\n          this.selectedClass = this.studentsDataList[0].class_name;\r\n          this.selectedSection = this.studentsDataList[0].section_name;\r\n          this.studentAvailabe = ' ';\r\n          // active mark all btn\r\n          this.mark_all_btn = true;\r\n          this.showTable = true;\r\n        } else {\r\n          this.studentAvailabe =\r\n            '* No Student Data available for selected class..!  ';\r\n          this.selectedClass = ' ';\r\n          this.selectedSection = ' ';\r\n        }\r\n      });\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Add Update  Data  Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ********************************************************** **********/\r\n  // ********* Mark student attendance  datewise *************************/\r\n  // ******************************************************************* */\r\n\r\n  public markAttendance(class_id, section_id, student_id, attendanceStatus) {\r\n    const date = this.selectedDate.split('-'); // get date from selected timestamp\r\n    const dailyAttendance = {\r\n      class_id: class_id,\r\n      section_id: section_id,\r\n      student_id: student_id,\r\n      timestamp: this.attendanceUnixTime,\r\n      dayDate: Number(date[2]),\r\n      month: Number(date[1]),\r\n      attend_year: Number(date[0]),\r\n      year: this.running_session,\r\n      attend_status: attendanceStatus\r\n    };\r\n\r\n    this._dailyAttendanceService\r\n      .markAttendanceF(dailyAttendance)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          // load student details after mark attendance\r\n          this.getStudentsForMarkAttend(class_id, section_id);\r\n          this.markAttendRespMsg = 'Attendance Updated Successfully';\r\n          this.attendanceNotifiction = 1;\r\n          this.FadeOutToaster();\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // ********* Mark student attendance  in bulk *************************/\r\n  // ******************************************************************* */\r\n\r\n  public MarkAll() {\r\n    const date = this.selectedDate.split('-'); // get date from selected timestamp\r\n    const dailyAttendance = {\r\n      timestamp: this.attendanceUnixTime,\r\n      dayDate: Number(date[2]),\r\n      month: Number(date[1]),\r\n      attend_year: Number(date[0]),\r\n      year: this.running_session,\r\n      bulk_attendance: this.studentsDataList\r\n    };\r\n\r\n    const array_count = this.studentsDataList.length;\r\n    this._dailyAttendanceService\r\n      .mark_Bulk_attendance(dailyAttendance)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          if (array_count === result.count) {\r\n            // if user click button without selecting present / absent for student\r\n            this._commonService.warningToaster(\r\n              'Kindly select any present / absent status',\r\n              'Failed!'\r\n            );\r\n          } else {\r\n            this._commonService.successToaster(\r\n              'Updated Successfully',\r\n              'Success!'\r\n            );\r\n          }\r\n        } else {\r\n          this._commonService.errorToaster('Server error try again', 'Failed!');\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // ***************** Add student leave reason *************************/\r\n  // ******************************************************************* */\r\n\r\n  public add_std_leaveReason(submitEvent) {\r\n    const update_data = {\r\n      attendance_id: submitEvent.value.attendance_id,\r\n      comment: submitEvent.value.absent_reason\r\n    };\r\n    this._dailyAttendanceService\r\n      .add_absent_reason(update_data)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this._commonService.successToaster(\r\n            'Updated Successfully',\r\n            'Success!'\r\n          );\r\n        } else {\r\n          this._commonService.errorToaster('Server error try again', 'Failed!');\r\n          console.log(result.msg);\r\n        }\r\n      });\r\n  }\r\n\r\n  // ************************************************************************************************************* */\r\n  /*********************************************General   Methods************************************************ */\r\n  // ************************************************************************************************************* */\r\n\r\n  openNgModal(content, size) {\r\n    this.modalService.open(content, { size: size });\r\n  }\r\n\r\n  // ********* Leave reason modal ********** */\r\n  public addLeave_Application(modal, student_name, attendance_id, comment) {\r\n    this.c_student_name = student_name;\r\n    this.attendance_id = attendance_id;\r\n    this.absent_reason = comment;\r\n\r\n    this.openNgModal(modal, 'md');\r\n  }\r\n\r\n  // ****** Select / unSelect bulk attendance Mark  **************************/\r\n\r\n  public selectAll() {\r\n    for (let i = 0; i < this.studentsDataList.length; i++) {\r\n      this.studentsDataList[i].attend_status = this.selectedAll;\r\n    }\r\n  }\r\n  public checkIfAllSelected() {\r\n    this.selectedAll = this.studentsDataList.every(function(item: any) {\r\n      return item.selected === 'P';\r\n    });\r\n  }\r\n\r\n  // *** selected class , section and date for attendance ****/\r\n\r\n  public onSubmitMngAtten(submitEvent) {\r\n    const manageAttendData = submitEvent.value;\r\n\r\n    this.selectedDate = manageAttendData.attendance_date;\r\n\r\n    // ** convert selected time to Unix timestamp\r\n    this.attendanceUnixTime = new Date(this.selectedDate).getTime() / 1000;\r\n    this.selected_unix_date = this.attendanceUnixTime;\r\n    const classId = manageAttendData.std_classId;\r\n    const sectionId = manageAttendData.std_sectionId;\r\n\r\n    this.getStudentsForMarkAttend(classId, sectionId);\r\n  }\r\n\r\n  // *** get sections against class for dropdown\r\n  public classSelected(class_id) {\r\n    this.getSectionByClassID(class_id);\r\n  }\r\n\r\n  /********************************* pagination Info ****************************/\r\n\r\n  public pageChanged(pN: number): void {\r\n    this.pageNumber = pN;\r\n  }\r\n\r\n  // enable manage attendance btn when section isnt empty\r\n  public enableBtn() {\r\n    this.disableBtn = false;\r\n  }\r\n\r\n  // hide success toaster after 2 secs\r\n  public FadeOutToaster() {\r\n    setTimeout(() => {\r\n      this.attendanceNotifiction = 0;\r\n    }, 1000);\r\n  }\r\n\r\n  // open modal\r\n  public openModal(modal) {\r\n    modal.open();\r\n  }\r\n\r\n  // close modal\r\n  public closeModal(modal) {\r\n    modal.close();\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { routing } from \"./attendance.routing\";\r\nimport { HttpModule } from \"@angular/http\";\r\n\r\nimport { NgxPaginationModule } from \"ngx-pagination\";\r\nimport { SelectModule } from \"ng2-select\";\r\nimport { ModalModule } from \"ngx-modal\";\r\nimport { Ng2SearchPipeModule } from \"ng2-search-filter\";\r\nimport { FileUploadModule } from \"ng2-file-upload\";\r\n\r\nimport {\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  FormGroup,\r\n  FormControl,\r\n  Validators\r\n} from \"@angular/forms\";\r\n/* components */\r\nimport { AttendanceComponent } from \"./attendance.component\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    Ng2SearchPipeModule,\r\n    NgxPaginationModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FileUploadModule,\r\n    SelectModule,\r\n    ModalModule,\r\n    HttpModule,\r\n    routing\r\n  ],\r\n  declarations: [AttendanceComponent]\r\n})\r\nexport class AttendanceModule {}\r\n","import { Routes, RouterModule } from \"@angular/router\";\r\nimport { AttendanceComponent } from \"./attendance.component\";\r\n\r\nconst childRoutes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: AttendanceComponent\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(childRoutes);\r\n"],"sourceRoot":""}