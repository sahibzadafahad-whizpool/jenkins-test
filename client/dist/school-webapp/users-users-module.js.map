{"version":3,"sources":["webpack:///./src/app/users/users.component.html","webpack:///./src/app/users/users.component.scss","webpack:///./src/app/users/users.component.ts","webpack:///./src/app/users/users.module.ts","webpack:///./src/app/users/users.routing.ts","webpack:///./src/app/users/users.service.ts"],"names":[],"mappings":"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","file":"users-users-module.js","sourcesContent":["module.exports = \"<div class=\\\"row\\\">\\r\\n\\r\\n    <div class=\\\"col-lg-12 grid-margin stretch-card\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <h4 class=\\\"card-title\\\">User Details</h4>\\r\\n\\r\\n\\r\\n                <div class=\\\"row\\\" style=\\\"padding-bottom: 1em; margin-top:-2em\\\">\\r\\n\\r\\n\\r\\n                    <div class=\\\"col-lg-10 \\\">\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-lg-2 pull-right \\\">\\r\\n\\r\\n                        <button _ngcontent-c2=\\\"\\\" (click)=\\\"openNgModal(addUserModal , 'lg')\\\" class=\\\"btn btn-success btn-block\\\">New\\r\\n              User\\r\\n              <i _ngcontent-c2=\\\"\\\" class=\\\"mdi mdi-plus\\\"></i></button>\\r\\n                    </div>\\r\\n                    <div style=\\\"text-align: center;\\\">\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n\\r\\n\\r\\n                <div class=\\\"table-responsive\\\">\\r\\n\\r\\n                    <table class=\\\"table table-bordered table-hover\\\">\\r\\n                        <thead class=\\\"thead-light\\\">\\r\\n                            <tr>\\r\\n                                <th># </th>\\r\\n                                <!-- <th>Admin</th> -->\\r\\n                                <th> Name </th>\\r\\n                                <th>Email </th>\\r\\n                                <th>Phone </th>\\r\\n                                <th>Status </th>\\r\\n                                <th>Role </th>\\r\\n\\r\\n                                <th *ngIf=\\\"(admin_level == 1)\\\">Actions</th>\\r\\n                            </tr>\\r\\n                        </thead>\\r\\n\\r\\n                        <tbody>\\r\\n                            <tr *ngFor=\\\"let item of usersData | paginate: { id: 'pager', itemsPerPage: pageSize, currentPage: pageNumber};let index = index\\\">\\r\\n                                <td>{{index + 1}}</td>\\r\\n                                <!-- <td> <img src=\\\"{{item.thumb_path == '' || NULL ? imagePath : item.thumb_path }}\\\"\\r\\n                            class=\\\"rounded-circle dropdown-toggle\\\" width=\\\"30px\\\" data-toggle=\\\"dropdown\\\" alt=\\\"avatar\\\"\\r\\n                            style=\\\" border-radius: 50%;\\\"> -->\\r\\n\\r\\n                                <!-- <img [src]=\\\"item.thumb_path == \\\"\\\" || null ? 'avatar' : item.thumb_path\\\" height=\\\"200\\\" /> -->\\r\\n\\r\\n                                <!-- </td> -->\\r\\n                                <td>{{item.user_name}}</td>\\r\\n                                <td>{{item.user_email}}</td>\\r\\n                                <td>{{ item.phone_num}}</td>\\r\\n                                <td>{{ item.status == '1' ? 'Active' : 'Inactive'}}</td>\\r\\n                                <td>{{ item.user_level == '1' ? 'Super Admin' : (item.user_level == '2' ? 'Admin' : 'Staff')}}</td>\\r\\n\\r\\n                                <td *ngIf=\\\"(admin_level == 1)\\\">\\r\\n\\r\\n                                    <label class=\\\"badge badge-info\\\" (click)=openEditUserModal(updateUserModal,index) style=\\\"cursor: pointer;\\\">Edit</label>\\r\\n                                    <label *ngIf=\\\"(item.user_level != 1)\\\" class=\\\"badge badge-danger\\\" (click)=deleteUser(item.login_id) style=\\\"cursor: pointer; margin-left: 1em;\\\">Delete</label>\\r\\n\\r\\n\\r\\n\\r\\n                                </td>\\r\\n                            </tr>\\r\\n                        </tbody>\\r\\n                    </table>\\r\\n\\r\\n                    <div style=\\\"text-align: center ; margin-top: 2em;\\\">\\r\\n                        <form class=\\\"pagination-wrapper\\\">\\r\\n                            <div class=\\\"form-group pages\\\">\\r\\n                                <pagination-controls class=\\\"my-pagination\\\" id=\\\"pager\\\" (pageChange)=\\\"pageChanged($event)\\\" maxSize=\\\"10\\\" directionLinks=\\\"true\\\" autoHide=\\\"true\\\" previousLabel=\\\"Prev\\\" nextLabel=\\\"Next\\\" screenReaderPaginationLabel=\\\"Pagination\\\" screenReaderPageLabel=\\\"page\\\" screenReaderCurrentLabel=\\\"You're on page\\\">\\r\\n                                </pagination-controls>\\r\\n                            </div>\\r\\n\\r\\n                        </form>\\r\\n                    </div>\\r\\n\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n<!-- add user modal  -->\\r\\n\\r\\n\\r\\n<ng-template #addUserModal let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Add New User</h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n     <form class=\\\"form-group\\\" #adduser=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmitAddUser(adduser)\\\">\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">Name * <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickedUname.valid && pickedUname.touched\\\"><small>\\r\\n                User Name Required</small> </span></label>\\r\\n                    <input type=\\\"text\\\" required style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"u_name\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"u_name\\\" #pickedUname=\\\"ngModel\\\">\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\"> Email * <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickedUemail.valid && pickedUemail.touched\\\"><small>\\r\\n                Email Required</small> </span></label>\\r\\n                    <input type=\\\"email\\\" required style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"u_email\\\" placeholder=\\\" Email\\\" [(ngModel)]=\\\"u_email\\\" #pickedUemail=\\\"ngModel\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">Password * <small>\\r\\n            </small> <span style=\\\"color:red;\\\" *ngIf=\\\"!pickedpassw.valid && pickedpassw.touched\\\"><small>\\r\\n                Password Required</small>\\r\\n            </span></label>\\r\\n                    <input type=\\\"password\\\" #pass style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" required name=\\\"u_password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"u_password\\\" #pickedpassw=\\\"ngModel\\\">\\r\\n                </div>\\r\\n\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">Confirm Password * <small>\\r\\n            </small> <span style=\\\"color:red;\\\" *ngIf=\\\"!pickedCpassw.valid && pickedCpassw.touched\\\"><small>\\r\\n                Confirm Password Required</small> </span> <span style=\\\"color:red;\\\" *ngIf=\\\"confirmPassCheck\\\"><small>\\r\\n                Not Matching</small>\\r\\n            </span>\\r\\n            <span style=\\\"color:green;\\\" *ngIf=\\\"confirmPassMatch\\\"><small>\\r\\n                Password Matching</small>\\r\\n            </span>\\r\\n          </label>\\r\\n                    <input type=\\\"password\\\" #confirmPass (keyup)=\\\"checkConfirmPass(confirmPass.value,pass.value)\\\" style=\\\"\\r\\n                    margin-top:0em;\\\" class=\\\"form-control fm-control\\\" required name=\\\"c_password\\\" placeholder=\\\"Confirm Password\\\" [(ngModel)]=\\\"c_password\\\" #pickedCpassw=\\\"ngModel\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">Phone Number <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickedPphoneNum.valid && pickedPphoneNum.touched\\\"><small>\\r\\n                PhoneNumber Required</small>\\r\\n            </span></label>\\r\\n                    <input type=\\\"number\\\" style=\\\"margin-top:0em;\\\" required class=\\\"form-control fm-control\\\" name=\\\"u_phoneNum\\\" placeholder=\\\"Phone Number\\\" [(ngModel)]=\\\"u_phoneNum\\\" #pickedPphoneNum=\\\"ngModel\\\">\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">User Role * </label>\\r\\n                    <span style=\\\"color:red;\\\" *ngIf=\\\"!pickedRoll.valid && pickedRoll.touched\\\"><small>\\r\\n              Role Required</small>\\r\\n          </span>\\r\\n                    <select class=\\\"form-control fm-control\\\" required #pickedRoll=\\\"ngModel\\\" style=\\\"margin-top:0em;\\\" [(ngModel)]=\\\"u_role\\\" name=\\\"u_role\\\">\\r\\n            <option [ngValue]=\\\"undefined\\\" disabled>Select Role</option>\\r\\n            <option value=\\\"1\\\">Super Admin</option>\\r\\n            <option value=\\\"2\\\">Admin</option>\\r\\n            <option value=\\\"3\\\">Staff</option>\\r\\n          </select>\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <!-- <label class=\\\"control-label\\\" style=\\\"margin-top:0em;\\\">Image </label> -->\\r\\n                    <input id=\\\"admin_image\\\" style=\\\"margin-top:0em;\\\" #imageFile accept=\\\"image/*\\\" name=\\\"admin_image\\\" type=\\\"hidden\\\" (change)=\\\"fileChangeEvent($event)\\\" class=\\\"form-control fm-control\\\" placeholder=\\\"Upload a picture...\\\" />\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n      <input type=\\\"submit\\\" class=\\\"btn btn-info\\\"  [disabled]=\\\"!adduser.form.valid || disableBtn\\\" value=\\\"Add New User\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"modal.close('Close click')\\\">Close</button>\\r\\n    </div>\\r\\n    </form>\\r\\n</ng-template>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- Update Parent  -->\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<ng-template #updateUserModal let-modal>\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <div style=\\\"text-align: center\\\">\\r\\n            <h3>Update User Info</h3>\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('Cross click')\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n    </div>\\r\\n     <form class=\\\"form-group\\\" #updateuser=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmitUpdateUser(updateuser)\\\">\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:.5em;\\\">Name * <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickedUnameU.valid && pickedUnameU.touched\\\"><small>\\r\\n                User Name Required</small> </span></label>\\r\\n                    <input type=\\\"text\\\" required style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"u_nameU\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"u_nameU\\\" #pickedUnameU=\\\"ngModel\\\">\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:.5em;\\\"> Email * <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickedUemailU.valid && pickedUemailU.touched\\\"><small>\\r\\n                Email Required</small> </span></label>\\r\\n                    <input type=\\\"email\\\" required style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"u_emailU\\\" placeholder=\\\" Email\\\" [(ngModel)]=\\\"u_emailU\\\" #pickedUemailU=\\\"ngModel\\\">\\r\\n                </div>\\r\\n\\r\\n\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:1em;\\\">Phone Number <span style=\\\"color:red;\\\"\\r\\n              *ngIf=\\\"!pickedPphoneNumU.valid && pickedPphoneNumU.touched\\\"><small>\\r\\n                PhoneNumber Required</small>\\r\\n            </span></label>\\r\\n                    <input type=\\\"number\\\" style=\\\"margin-top:0em;\\\" required class=\\\"form-control fm-control\\\" name=\\\"u_phoneNumU\\\" placeholder=\\\"Phone Number\\\" [(ngModel)]=\\\"u_phoneNumU\\\" #pickedPphoneNumU=\\\"ngModel\\\">\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:1em;\\\">User Role * </label>\\r\\n                    <span style=\\\"color:red;\\\" *ngIf=\\\"!pickedRollU.valid && pickedRollU.touched\\\"><small>\\r\\n              Role Required</small>\\r\\n          </span>\\r\\n                    <select class=\\\"form-control fm-control\\\" required #pickedRollU=\\\"ngModel\\\" style=\\\"margin-top:0em;\\\" [(ngModel)]=\\\"u_roleU\\\" name=\\\"u_roleU\\\">\\r\\n            <option [ngValue]=\\\"undefined\\\" disabled>Select Role</option>\\r\\n            <option value=\\\"1\\\">Super Admin</option>\\r\\n            <option value=\\\"2\\\">Admin</option>\\r\\n            <option value=\\\"3\\\">Staff</option>\\r\\n          </select>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:1em;\\\">User Status * </label>\\r\\n                    <span style=\\\"color:red;\\\" *ngIf=\\\"!pickedstatusU.valid && pickedstatusU.touched\\\"><small>\\r\\n              Status Required</small>\\r\\n          </span>\\r\\n                    <select class=\\\"form-control fm-control\\\" required #pickedstatusU=\\\"ngModel\\\" style=\\\"margin-top:0em;\\\" [(ngModel)]=\\\"u_status\\\" name=\\\"u_status\\\">\\r\\n            <option [ngValue]=\\\"undefined\\\" disabled>Select Status</option>\\r\\n            <option value=\\\"1\\\">Active</option>\\r\\n            <option value=\\\"2\\\">Inactive</option>\\r\\n\\r\\n          </select>\\r\\n                </div>\\r\\n                <div class=\\\"col-md-4 form-group\\\">\\r\\n                    <label class=\\\"control-label\\\" style=\\\"margin-top:1em;\\\">Password <small>\\r\\n            </small> <span style=\\\"color:red;\\\" *ngIf=\\\"!pickedUpassw.valid && pickedUpassw.touched\\\"><small>\\r\\n                Password Required</small>\\r\\n            </span></label>\\r\\n                    <input type=\\\"password\\\" #passU style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"u_passwordU\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"u_passwordU\\\" #pickedUpassw=\\\"ngModel\\\">\\r\\n                </div>\\r\\n\\r\\n\\r\\n                <input type=\\\"hidden\\\" style=\\\"margin-top:0em;\\\" class=\\\"form-control fm-control\\\" name=\\\"login_id\\\" [(ngModel)]=\\\"login_id\\\">\\r\\n\\r\\n            </div>\\r\\n\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n       <input type=\\\"submit\\\" class=\\\"btn btn-info\\\"  [disabled]=\\\"!updateuser.form.valid || disableBtn\\\" value=\\\"Update User\\\">\\r\\n\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"modal.close('Close click')\\\">Close</button>\\r\\n    </div>\\r\\n      </form>\\r\\n</ng-template>\\r\\n\"","module.exports = \"\"","import { Component, ElementRef, OnInit } from '@angular/core';\r\nimport swal from 'sweetalert2';\r\nimport { Md5 } from 'ts-md5/dist/md5';\r\nimport { UsersService } from './users.service';\r\nimport { GlobalService } from '../shared/services/global.service';\r\nimport { ViewChild } from '@angular/core';\r\nimport { CommonService } from '../shared/services/common.service';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss'],\r\n  providers: [UsersService, GlobalService, CommonService]\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  // reset image filed after submit\r\n  @ViewChild('imageFile')\r\n  myInputVariable: ElementRef;\r\n\r\n  public imagePath = 'assets/images/student_2.png ';\r\n\r\n  // default\r\n  public loadData;\r\n  public pageSize = 10;\r\n  public pageNumber = 1;\r\n\r\n  public admin_level: any;\r\n\r\n  // add user variables\r\n  public c_password: any;\r\n  public u_password: any;\r\n  public u_email = '';\r\n  public u_name = '';\r\n\r\n  public u_phoneNum: number;\r\n  public u_role: number;\r\n  public admin_image;\r\n\r\n  // update user variables\r\n\r\n  public u_nameU = '';\r\n  public u_emailU = '';\r\n  public u_phoneNumU = '';\r\n  public u_roleU: any;\r\n  public u_status: number;\r\n  public login_id: number;\r\n  public existing_email = '';\r\n  public c_passwordU = '';\r\n  public u_passwordU = '';\r\n\r\n  // notifications variables\r\n  public confirmPassCheck = false;\r\n  public confirmPassMatch = false;\r\n  public disableBtn = false;\r\n  // update\r\n  public disableUBtn = false;\r\n  public confirmPassCheckU = false;\r\n  public confirmPassMatchU = false;\r\n\r\n  // array\r\n  public usersData: Array<any>;\r\n  public filesToUpload: Array<File> = [];\r\n\r\n  constructor(\r\n    private _globalService: GlobalService,\r\n    private _usersService: UsersService,\r\n    private _commonService: CommonService,\r\n    private modalService: NgbModal\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // get admin level\r\n    this.admin_level = localStorage.getItem('admin_level');\r\n    this.get_userDetails();\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Read Data from DB Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ********************************************************** **********/\r\n  // ************************* get user data ***************************/\r\n  // ******************************************************************* */\r\n  public get_userDetails() {\r\n    this._usersService.get_userDetailsF().subscribe(result => {\r\n      if (result.status === 1) {\r\n        this.usersData = result.data;\r\n      } else if (result.status === 0) {\r\n        this._commonService.warningToaster(result.msg, 'Failed!');\r\n      } else if (result.status === 403) {\r\n        this._commonService.warningToaster('Login Session Expired', 'Login!');\r\n        this._globalService.logoutFun();\r\n      } else {\r\n        this._commonService.errorToaster(result.msg, 'Failed!');\r\n      }\r\n    });\r\n  }\r\n\r\n  // *********************************************************************************************************************** */\r\n  /**********************************************************Add Update  Data  Methods************************************** */\r\n  // *********************************************************************************************************************** */\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Add new User ************************/\r\n  // ******************************************************************* */\r\n\r\n  public onSubmitAddUser(submitedEvent) {\r\n    // get admin image\r\n    const imagesData: any = new FormData();\r\n    const files: Array<File> = this.filesToUpload;\r\n    // console.log(files);\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      imagesData.append('uploads[]', files[i], files[i]['name']);\r\n    }\r\n\r\n    const eventHandler = submitedEvent.value;\r\n    const hash_pass = Md5.hashStr(eventHandler.u_password);\r\n\r\n    const user_data = {\r\n      user_name: eventHandler.u_name,\r\n      user_email: eventHandler.u_email,\r\n      user_password: hash_pass,\r\n      phone_num: eventHandler.u_phoneNum,\r\n      user_level: Number(eventHandler.u_role)\r\n    };\r\n\r\n    this._usersService.add_newUserF(user_data).subscribe(result => {\r\n      if (result.status === 1) {\r\n        const id = JSON.stringify(result.inserted_id);\r\n        imagesData.append('id', id); // admin id\r\n        imagesData.append('tbl_name', 'tbl_users'); //\r\n        imagesData.append('source', 'admin');\r\n\r\n        // add admin images\r\n\r\n        this._commonService.add_images(imagesData).subscribe(resp_result => {\r\n          this.filesToUpload = [];\r\n        });\r\n\r\n        this._commonService.successToaster('Added Successfully', 'Success!');\r\n        submitedEvent.reset();\r\n        this.get_userDetails();\r\n      } else if (result.status === 3) {\r\n        this._commonService.warningToaster(result.msg, 'Failed!');\r\n      } else if (result.status === 403) {\r\n        this._commonService.warningToaster('Login Session Expired', 'Failed!');\r\n        this._globalService.logoutFun();\r\n      } else {\r\n        swal('Failed!', result.msg, 'error');\r\n        this._commonService.errorToaster(result.msg, 'Failed!');\r\n      }\r\n    });\r\n  }\r\n\r\n  // ************************************************************************************************************* */\r\n  /*********************************************Store Images in Array******************************** */\r\n  // ************************************************************************************************************* */\r\n\r\n  public fileChangeEvent(fileInput: any) {\r\n    this.filesToUpload = <Array<File>>fileInput.target.files;\r\n    // this.product.photo = fileInput.target.files[0]['name'];\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Update  User ************************/\r\n  // ******************************************************************* */\r\n\r\n  public onSubmitUpdateUser(submitEvent) {\r\n    const user_data = submitEvent.value;\r\n    const login_id = user_data.login_id;\r\n    let update_data;\r\n    let flag = 0;\r\n\r\n    if (typeof user_data.u_passwordU !== 'undefined') {\r\n      flag = 1;\r\n      const hash_pass = Md5.hashStr(submitEvent.value.u_passwordU);\r\n\r\n      update_data = {\r\n        user_email: user_data.u_emailU,\r\n        user_name: user_data.u_nameU,\r\n        phone_num: user_data.u_phoneNumU,\r\n        user_level: user_data.u_roleU,\r\n        status: user_data.u_status,\r\n        existing_email: this.existing_email,\r\n        user_password: hash_pass\r\n      };\r\n    } else {\r\n      update_data = {\r\n        user_email: user_data.u_emailU,\r\n        user_name: user_data.u_nameU,\r\n        phone_num: user_data.u_phoneNumU,\r\n        user_level: user_data.u_roleU,\r\n        status: user_data.u_status,\r\n        existing_email: this.existing_email\r\n      };\r\n    }\r\n\r\n    this._usersService\r\n      .updateUserInfo(update_data, login_id)\r\n      .subscribe(result => {\r\n        if (result.status === 1) {\r\n          this._commonService.successToaster(\r\n            'Updated Successfully',\r\n            'Success!'\r\n          );\r\n          if (flag === 1) {\r\n            // if admin is logged in and change password then logout\r\n\r\n            const loggedInUserId = Number(localStorage.getItem('id'));\r\n            // logout the user of their password is changed\r\n            if (login_id === loggedInUserId) {\r\n              setTimeout(() => {\r\n                this._globalService.logoutFun();\r\n              }, 3000);\r\n            }\r\n          }\r\n          this.get_userDetails();\r\n        } else if (result.status === 3) {\r\n          this._commonService.warningToaster(result.msg, 'Failed!');\r\n        } else if (result.status === 403) {\r\n          this._commonService.warningToaster(\r\n            'Login Session Expired',\r\n            'Failed!'\r\n          );\r\n          this._globalService.logoutFun();\r\n        } else {\r\n          swal('Failed!', result.msg, 'error');\r\n          this._commonService.errorToaster(result.msg, 'Failed!');\r\n        }\r\n      });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Update  User Password ************************/\r\n  // ******************************************************************* */\r\n\r\n  public onSubmitUptPass(submitEvent) {\r\n    const hash_pass = Md5.hashStr(submitEvent.value.u_passwordU);\r\n    const passwordData = {\r\n      login_id: this.login_id,\r\n      user_password: hash_pass\r\n    };\r\n\r\n    this._usersService.update_userPassword(passwordData).subscribe(result => {\r\n      if (result.status === 1) {\r\n        this._commonService.successToaster(\r\n          'Password Updated successfully',\r\n          'Success!'\r\n        );\r\n        this.get_userDetails();\r\n\r\n        const loggedInUserId = Number(localStorage.getItem('id'));\r\n        // logout the user of their password is changed\r\n        if (this.login_id === loggedInUserId) {\r\n          setTimeout(() => {\r\n            this._globalService.logoutFun();\r\n          }, 3000);\r\n        }\r\n      } else if (result.status === 403) {\r\n        this._commonService.warningToaster(\r\n          'Login Session Expired',\r\n          'Login Required!'\r\n        );\r\n        this._globalService.logoutFun();\r\n      } else {\r\n        this._commonService.warningToaster(result.msg, 'Failed');\r\n      }\r\n    });\r\n  }\r\n\r\n  // ********************************************************** **********/\r\n  // *********************** Delete Admin ************************/\r\n  // ******************************************************************* */\r\n\r\n  public deleteUser(user_id) {\r\n    const user = {\r\n      user_id: user_id\r\n    };\r\n\r\n    swal({\r\n      title: 'Are you sure?',\r\n      text: 'You wont be able to revert this!',\r\n      type: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!'\r\n    }).then(result => {\r\n      if (result.value) {\r\n        // if user confirm then call delete API\r\n        this._usersService.deleteAdmin(user).subscribe(data => {\r\n          if (data.status === 1) {\r\n            this.get_userDetails(); // load admin data after deleting data\r\n            this._commonService.successToaster(\r\n              'Admin has been deleted.',\r\n              'Deleted'\r\n            );\r\n          } else {\r\n            this._commonService.errorToaster('Some error try again.', 'Error!');\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // ************************************************************************************************************* */\r\n  /*********************************************General   Methods************************************************ */\r\n  // ************************************************************************************************************* */\r\n\r\n  // new modal\r\n  openNgModal(content, size) {\r\n    this.modalService.open(content, { size: size });\r\n  }\r\n\r\n  /********************************* pagination Info ****************************/\r\n  public pageChanged(pN: number): void {\r\n    this.pageNumber = pN;\r\n  }\r\n\r\n  // ************ check password and confirm password\r\n  public checkConfirmPass(c_pass, pass) {\r\n    this.confirmPassCheck = true;\r\n    if (c_pass === pass) {\r\n      this.confirmPassCheck = false;\r\n      this.confirmPassMatch = true;\r\n      this.disableBtn = false;\r\n    } else {\r\n      this.confirmPassCheck = true;\r\n      this.confirmPassMatch = false;\r\n      this.disableBtn = true;\r\n    }\r\n  }\r\n\r\n  // ************ check password and confirm password on update\r\n  public checkConfirmPassOnUpdate(c_pass, pass) {\r\n    this.confirmPassCheckU = true;\r\n    if (c_pass === pass) {\r\n      this.confirmPassCheckU = false;\r\n      this.confirmPassMatchU = true;\r\n      this.disableUBtn = false;\r\n    } else {\r\n      this.confirmPassCheckU = true;\r\n      this.confirmPassMatchU = false;\r\n      this.disableUBtn = true;\r\n    }\r\n  }\r\n\r\n  // ************ open edit model ************\r\n  public openEditUserModal(modal, arrayIndex) {\r\n    this.confirmPassCheckU = false;\r\n    this.confirmPassMatchU = false;\r\n    this.c_passwordU = '';\r\n    this.u_passwordU = '';\r\n\r\n    let userDataString = null;\r\n    userDataString = this.usersData[arrayIndex];\r\n    this.u_nameU = userDataString.user_name;\r\n    this.u_emailU = userDataString.user_email;\r\n    this.u_phoneNumU = userDataString.phone_num;\r\n    this.u_roleU = userDataString.user_level;\r\n    this.u_status = userDataString.status;\r\n    this.login_id = userDataString.login_id;\r\n\r\n    // for checking email while updating query\r\n    this.existing_email = userDataString.user_email;\r\n\r\n    this.openNgModal(modal, 'lg');\r\n  }\r\n\r\n  // open update modal\r\n  public openModal(modal) {\r\n    modal.open();\r\n  }\r\n\r\n  // close model\r\n  public closeModal(modal) {\r\n    modal.close();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { routing } from './users.routing';\r\n\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\nimport { SelectModule } from 'ng2-select';\r\nimport { ModalModule } from 'ngx-modal';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n/* components */\r\nimport { UsersComponent } from './users.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NgxPaginationModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n\r\n    SelectModule,\r\n    ModalModule,\r\n    routing,\r\n    NgbModule.forRoot()\r\n  ],\r\n  declarations: [UsersComponent]\r\n})\r\nexport class UsersModule {}\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { UsersComponent } from './users.component';\r\n\r\nconst childRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UsersComponent\r\n  }\r\n];\r\n\r\nexport const routing = RouterModule.forChild(childRoutes);\r\n","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport { GlobalService } from '../shared/services/global.service';\r\nimport 'rxjs/add/operator/catch';\r\n@Injectable()\r\nexport class UsersService {\r\n  constructor(private http: Http, private _globalService: GlobalService) {}\r\n  public serverLink = this._globalService.constants.serverLink;\r\n  public headers = new Headers(this._globalService.constants.headers);\r\n\r\n  // *********************** Call  API to add new users *****************************\r\n\r\n  add_newUserF(new_user_data) {\r\n    return this.http\r\n      .post(this.serverLink + 'add/new_user', new_user_data, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Call  API to get all users *****************************\r\n  get_userDetailsF() {\r\n    return this.http\r\n      .get(this.serverLink + 'get/user_data', {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Call  API to update users *****************************\r\n  updateUserInfo(update_data, login_id) {\r\n    return this.http\r\n      .put(\r\n        this.serverLink + 'update/update_userInfo/' + login_id,\r\n        update_data,\r\n        {\r\n          headers: this.headers\r\n        }\r\n      )\r\n      .map(response => response.json());\r\n  }\r\n\r\n  // *********************** Update Password *****************************\r\n  update_userPassword(passwordData) {\r\n    return this.http\r\n      .put(this.serverLink + 'update/userPassword', passwordData, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n\r\n  deleteAdmin(user) {\r\n    return this.http\r\n      .post(this.serverLink + 'delete/user', user, {\r\n        headers: this.headers\r\n      })\r\n      .map(response => response.json());\r\n  }\r\n}\r\n"],"sourceRoot":""}